<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Slient Plant</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mpwang.github.io/"/>
  <updated>2019-02-13T16:43:33.225Z</updated>
  <id>http://mpwang.github.io/</id>
  
  <author>
    <name>Randall Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何使用 Org 文档写 Hexo 博客</title>
    <link href="http://mpwang.github.io/2019/02/13/how-to-write-hexo-blog-with-org-mode/"/>
    <id>http://mpwang.github.io/2019/02/13/how-to-write-hexo-blog-with-org-mode/</id>
    <published>2019-02-13T14:39:15.000Z</published>
    <updated>2019-02-13T16:43:33.225Z</updated>
    
    <content type="html"><![CDATA[<div id="content"><div class="tabs" id="org-toc" style="font-size: 12px;"><ul class="nav-tabs"><li class="tab"><a class="btn" href="#tab-org9dfd9bd">1. Hexo &#x4E0E; Org-mode</a></li><li class="tab"><a class="btn" href="#tab-org6c5f0d7">2. hexo-renderer-org</a></li><li class="tab"><a class="btn" href="#tab-org14f94dd">3. &#x914D;&#x5408;&#x4F7F;&#x7528; Hexo &#x7684;&#x6587;&#x7AE0;&#x8D44;&#x6E90;&#x6587;&#x4EF6;&#x5939;</a></li><li class="tab"><a class="btn" href="#tab-org0e26ec3">4. &#x914D;&#x5408; Hexo &#x4E3B;&#x9898;: NexT</a></li><li class="tab"><a class="btn" href="#tab-orgcdf7edf">5. &#x6280;&#x5DE7;</a></li></ul><div class="tab-content"><div class="tab-pane" id="tab-org9dfd9bd"><ul><a href="#org9dfd9bd">1. Hexo &#x4E0E; Org-mode</a></ul></div><div class="tab-pane" id="tab-org6c5f0d7"><ul><a href="#org6c5f0d7">2. hexo-renderer-org</a><li><a href="#org0f1f66b">2.1. &#x5B89;&#x88C5;</a></li><li><a href="#org8c68f20">2.2. &#x5DE5;&#x4F5C;&#x539F;&#x7406;</a></li><li><a href="#org3e2a5a2">2.3. emacs &#x7684;&#x914D;&#x7F6E;</a></li><li><a href="#org8f53d30">2.4. hexo &#x7684;&#x914D;&#x7F6E;</a></li><li><a href="#org150f402">2.4.1. &#x4E0D;&#x8981;&#x4F7F;&#x7528; emacs htmlize &#x529F;&#x80FD;</a></li><li><a href="#orgc4341e7">2.5. Enjoy</a></li></ul></div><div class="tab-pane" id="tab-org14f94dd"><ul><a href="#org14f94dd">3. &#x914D;&#x5408;&#x4F7F;&#x7528; Hexo &#x7684;&#x6587;&#x7AE0;&#x8D44;&#x6E90;&#x6587;&#x4EF6;&#x5939;</a></ul></div><div class="tab-pane" id="tab-org0e26ec3"><ul><a href="#org0e26ec3">4. &#x914D;&#x5408; Hexo &#x4E3B;&#x9898;: NexT</a></ul></div><div class="tab-pane" id="tab-orgcdf7edf"><ul><a href="#orgcdf7edf">5. &#x6280;&#x5DE7;</a></ul></div></div></div><div id="outline-container-org9dfd9bd" class="outline-2"><h2 id="org9dfd9bd"><span class="section-number-2">1</span> Hexo &#x4E0E; Org-mode</h2><div class="outline-text-2" id="text-1"><p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo <i class="fa fa-external-link" aria-hidden="true"></i></a> &#x662F;&#x4E00;&#x4E2A;&#x5FEB;&#x901F;&#x3001;&#x7B80;&#x6D01;&#x4E14;&#x9AD8;&#x6548;&#x7684;&#x7528;&#x4E8E;&#x751F;&#x6210;&#x9759;&#x6001;&#x7F51;&#x9875;&#x7684;&#x535A;&#x5BA2;&#x6846;&#x67B6;, &#x751F;&#x6210;&#x7684;&#x7F51;&#x9875;&#x53EF;&#x4EE5;&#x65B9;&#x4FBF;&#x5730;&#x6258;&#x7BA1;&#x5230; <a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages <i class="fa fa-external-link" aria-hidden="true"></i></a>, &#x53EF;&#x4EE5;&#x5FEB;&#x901F;&#x65B9;&#x4FBF;&#x5730;&#x521B;&#x5EFA;&#x4E2A;&#x4EBA;&#x535A;&#x5BA2;.</p><p>Hexo &#x9ED8;&#x8BA4;&#x4F7F;&#x7528;<a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener"> Markdown <i class="fa fa-external-link" aria-hidden="true"></i></a> &#x683C;&#x5F0F;&#x89E3;&#x6790;&#x6587;&#x7AE0;, &#x672C;&#x6587;&#x4ECB;&#x7ECD;&#x5982;&#x4F55;&#x4F7F;&#x7528; <a href="https://orgmode.org/" target="_blank" rel="noopener">org <i class="fa fa-external-link" aria-hidden="true"></i></a> &#x6587;&#x6863;&#x751F;&#x6210; Hexo &#x535A;&#x5BA2;&#x6587;&#x7AE0;.</p></div></div><div id="outline-container-org6c5f0d7" class="outline-2"><h2 id="org6c5f0d7"><span class="section-number-2">2</span> hexo-renderer-org</h2><div class="outline-text-2" id="text-2"><p>hexo-renderer-org &#x662F; hexo &#x7684;&#x4E00;&#x4E2A;&#x63D2;&#x4EF6;, &#x7528;&#x4E8E;&#x5C06; org &#x6587;&#x6863;&#x751F;&#x6210; hexo &#x7684;&#x535A;&#x5BA2;&#x6587;&#x7AE0;. Hexo &#x89E3;&#x6790; Markdown &#x6587;&#x6863;&#x7684;&#x80FD;&#x529B;&#x4FDD;&#x6301;&#x4E0D;&#x53D8;, &#x76F8;&#x5F53;&#x4E8E;&#x7ED9; Hexo &#x52A0;&#x4E0A;org &#x6587;&#x6863;&#x7684;&#x652F;&#x6301;.</p><p>&#x4F7F;&#x7528;&#x6211;&#x7EF4;&#x62A4;&#x7684; <a href="https://github.com/mpwang/hexo-renderer-org" target="_blank" rel="noopener">hexo-renderer-org <i class="fa fa-external-link" aria-hidden="true"></i></a> &#x9879;&#x76EE;<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>.</p></div><div id="outline-container-org0f1f66b" class="outline-3"><h3 id="org0f1f66b"><span class="section-number-3">2.1</span> &#x5B89;&#x88C5;</h3><div class="outline-text-3" id="text-2-1"><p>&#x5728; Hexo &#x535A;&#x5BA2;&#x6587;&#x4EF6;&#x5939;&#x4E0B;&#x5B89;&#x88C5; hexo-renderer-org</p><div class="org-src-container"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/mpwang/hexo-renderer-org<span class="comment">#master --save</span></span><br></pre></td></tr></table></figure></div></div></div><div id="outline-container-org8c68f20" class="outline-3"><h3 id="org8c68f20"><span class="section-number-3">2.2</span> &#x5DE5;&#x4F5C;&#x539F;&#x7406;</h3><div class="outline-text-3" id="text-2-2"><p>&#x5B89;&#x88C5;&#x4E86; hexo-renderer-org &#x4E4B;&#x540E;, hexo &#x547D;&#x4EE4;&#x4F1A;&#x4F7F;&#x7528; emacsclient &#x53BB;&#x8FDE;&#x63A5; emacs server, &#x4F7F;&#x7528; org export &#x529F;&#x80FD;&#x5C06; org &#x6587;&#x6863;&#x8F6C;&#x6362;&#x6210; html, &#x6240;&#x4EE5;&#x8981;&#x6C42; emacs &#x5F00;&#x542F; server &#x8FDB;&#x7A0B;.</p></div></div><div id="outline-container-org3e2a5a2" class="outline-3"><h3 id="org3e2a5a2"><span class="section-number-3">2.3</span> emacs &#x7684;&#x914D;&#x7F6E;</h3><div class="outline-text-3" id="text-2-3"><p><div class="note warning">            <p>spacemacs 用户配置</p>          </div></p><p>&#x542F;&#x7528; emacs server &#x8FDB;&#x7A0B;&#x4EE5;&#x53CA;&#x8BBE;&#x7F6E; emacs server socket &#x6587;&#x4EF6;&#x6240;&#x5728;&#x7684;&#x6587;&#x4EF6;&#x5939;.</p><div class="org-src-container"><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; If non-nil, start an Emacs server if one is not already running.</span></span><br><span class="line"><span class="comment">;; (default nil)</span></span><br><span class="line">dotspacemacs-enable-server <span class="literal">t</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; Set the emacs server socket location.</span></span><br><span class="line"><span class="comment">;; If nil, uses whatever the Emacs default is, otherwise a directory path</span></span><br><span class="line"><span class="comment">;; like \&quot;~/.emacs.d/server\&quot;. It has no effect if</span></span><br><span class="line"><span class="comment">;; `dotspacemacs-enable-server&apos; is nil.</span></span><br><span class="line"><span class="comment">;; (default nil)</span></span><br><span class="line">dotspacemacs-server-socket-dir <span class="string">&quot;~/.emacs.d/server&quot;</span></span><br></pre></td></tr></table></figure></div></div></div><div id="outline-container-org8f53d30" class="outline-3"><h3 id="org8f53d30"><span class="section-number-3">2.4</span> hexo &#x7684;&#x914D;&#x7F6E;</h3><div class="outline-text-3" id="text-2-4"><p>&#x5728; hexo &#x535A;&#x5BA2;&#x7684;&#x914D;&#x7F6E;&#x6587;&#x4EF6; <code>_config.yml</code> &#x4E2D;&#x6DFB;&#x52A0;</p><div class="org-src-container"><figure class="highlight"><table><tr><td class="code"><pre><span class="line">org:  # &#x6307;&#x5B9A; emacs &#x6267;&#x884C;&#x6587;&#x4EF6;&#x8DEF;&#x5F84;  emacs: &apos;/usr/local/bin/emacs&apos;  # &#x6307;&#x5B9A; emacsclient &#x6267;&#x884C;&#x6587;&#x4EF6;&#x8DEF;&#x5F84;  emacsclient: &apos;/usr/local/bin/emacsclient&apos;  # &#x662F;&#x5426;&#x751F;&#x6210;&#x81EA;&#x52A8;&#x6CE8;&#x811A;, t &#x4E3A;&#x5F00;&#x542F;, nil &#x4E3A;&#x5173;&#x95ED;  common: |    #+OPTIONS: html-postamble:nil  clean_cache: true  daemonize: true  # emacs server file &#x8DEF;&#x5F84;, &#x5982;&#x679C;&#x4E0D;&#x6307;&#x5B9A;, &#x4EE5;&#x4E0B;&#x4E3A;&#x9ED8;&#x8BA4;&#x503C;  server_file: &quot;~/.emacs.d/server/server&quot;</span><br></pre></td></tr></table></figure></div></div><div id="outline-container-org150f402" class="outline-4"><h4 id="org150f402"><span class="section-number-4">2.4.1</span> &#x4E0D;&#x8981;&#x4F7F;&#x7528; emacs htmlize &#x529F;&#x80FD;</h4><div class="outline-text-4" id="text-2-4-1"><p>README &#x6587;&#x6863;&#x91CC;&#x7684; htmlize &#x529F;&#x80FD;&#x6211;&#x6CA1;&#x6709;&#x6210;&#x529F;&#x8FC7;, &#x8BBE;&#x7F6E; <code>htmlize: true</code> &#x4E4B;&#x540E;&#x751F;&#x6210;&#x7684;&#x5185;&#x5BB9;&#x4F1A;&#x51FA;&#x9519;. &#x4E0D;&#x8FC7;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x5F71;&#x54CD;&#x4E0D;&#x5927;, &#x4EE3;&#x7801;&#x9AD8;&#x4EAE;&#x4EA4;&#x7ED9; <code>highlight.js</code> &#x53BB;&#x5904;&#x7406;.</p></div></div></div><div id="outline-container-orgc4341e7" class="outline-3"><h3 id="orgc4341e7"><span class="section-number-3">2.5</span> Enjoy</h3><div class="outline-text-3" id="text-2-5"><p>&#x73B0;&#x5728;&#x5728;&#x5F00;&#x542F; emacs &#x7684;&#x60C5;&#x51B5;&#x4E0B;, &#x6267;&#x884C;&#x4EE5;&#x4E0B;&#x547D;&#x4EE4;&#x5373;&#x53EF;&#x4EE5;&#x4EAB;&#x53D7;&#x7528;&#x5F3A;&#x5927;&#x7684; org-mode &#x5199;&#x6587;&#x6863;, &#x5E76;&#x751F;&#x6210; Hexo &#x535A;&#x5BA2;.</p><div class="org-src-container"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server --debug</span><br></pre></td></tr></table></figure></div></div></div></div><div id="outline-container-org14f94dd" class="outline-2"><h2 id="org14f94dd"><span class="section-number-2">3</span> &#x914D;&#x5408;&#x4F7F;&#x7528; Hexo &#x7684;&#x6587;&#x7AE0;&#x8D44;&#x6E90;&#x6587;&#x4EF6;&#x5939;</h2><div class="outline-text-2" id="text-3"><p>Hexo3 &#x52A0;&#x5165;&#x4E86;<a href="https://hexo.io/zh-cn/docs/asset-folders.html" target="_blank" rel="noopener">&#x6587;&#x7AE0;&#x8D44;&#x6E90;&#x6587;&#x4EF6;&#x5939; <i class="fa fa-external-link" aria-hidden="true"></i></a>&#x7684;&#x652F;&#x6301;, &#x6587;&#x7AE0;&#x76F8;&#x5173;&#x7684;&#x56FE;&#x7247;&#x53EF;&#x4EE5;&#x653E;&#x5728;&#x6587;&#x7AE0;&#x540C;&#x540D;&#x6587;&#x4EF6;&#x5939;&#x91CC;&#x9762;, &#x5E76;&#x4F7F;&#x7528;&#x4EE5;&#x4E0B;&#x4EE3;&#x7801;&#x5F15;&#x7528;&#x56FE;&#x7247;</p><pre class="example">{% asset_img slug [title] %}</pre><p></p><p>&#x800C;&#x5728; org &#x6587;&#x6863;&#x4E2D;&#x914D;&#x5408; org-download, &#x6211;&#x4EEC;&#x8FD8;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x66F4;&#x5F3A;&#x5927;&#x7684;&#x529F;&#x80FD;. &#x5728; Hexo &#x535A;&#x5BA2;&#x6587;&#x4EF6;&#x5939;&#x4E2D;&#x521B;&#x5EFA; <code>.dir-local.el</code>, &#x6DFB;&#x52A0;&#x4EE5;&#x4E0B;&#x4EE3;&#x7801;</p><div class="org-src-container"><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="list">(<span class="keyword">nil</span> .</span><br><span class="line">   <span class="list">(<span class="list">(<span class="keyword">eval</span> .</span><br><span class="line">          <span class="list">(<span class="keyword">progn</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">;; make drag-and-drop image save in the same name folder as org file</span></span><br><span class="line">            <span class="comment">;; ex: `aa-bb-cc.org&apos; then save image test.png to `aa-bb-cc/test.png&apos;</span></span><br><span class="line">            <span class="list">(<span class="keyword">defun</span> my-org-download-method <span class="list">(<span class="keyword">link</span>)</span></span><br><span class="line">              <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">filename</span></span><br><span class="line">                     <span class="list">(<span class="keyword">file-name-nondirectory</span></span><br><span class="line">                      <span class="list">(<span class="keyword">car</span> <span class="list">(<span class="keyword">url-path-and-query</span></span><br><span class="line">                            <span class="list">(<span class="keyword">url-generic-parse-url</span> link)</span>)</span>)</span>)</span>)</span></span><br><span class="line">                    <span class="list">(<span class="keyword">dirname</span> <span class="list">(<span class="keyword">file-name-sans-extension</span> buffer-file-name )</span> )</span>)</span></span><br><span class="line">                <span class="comment">;; if directory not exist, create it</span></span><br><span class="line">                <span class="list">(<span class="keyword">unless</span> <span class="list">(<span class="keyword">file-exists-p</span> dirname)</span></span><br><span class="line">                  <span class="list">(<span class="keyword">make-directory</span> dirname)</span>)</span></span><br><span class="line">                <span class="comment">;; return the path to save the download files</span></span><br><span class="line">                <span class="list">(<span class="keyword">expand-file-name</span> filename dirname)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">;; only modify `org-download-method&apos; in this project</span></span><br><span class="line">            <span class="list">(<span class="keyword">setq-local</span> org-download-method <span class="quoted">&apos;my-org-download-method</span>)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span></span><br><span class="line">            <span class="comment">;; for using hexo config post_asset_folder: true             ;;</span></span><br><span class="line">            <span class="comment">;; https://hexo.io/docs/asset-folders.html#Post-Asset-Folder ;;</span></span><br><span class="line">            <span class="comment">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">;; only modify `org-download-link-format&apos; in this project</span></span><br><span class="line">            <span class="list">(<span class="keyword">setq-local</span> org-download-link-format <span class="string">&quot;{%% asset_img %s %%}&quot;</span>)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">;; only modify `org-download-abbreviate-filename-function&apos; in</span></span><br><span class="line">            <span class="comment">;; this project</span></span><br><span class="line">            <span class="list">(<span class="keyword">setq-local</span> org-download-abbreviate-filename-function <span class="quoted">#&apos;file-name-nondirectory</span>)</span></span><br><span class="line">            )</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure></div><p>&#x73B0;&#x5728;&#x4F60;&#x53EF;&#x4EE5;&#x5C06;&#x56FE;&#x7247;&#x652F;&#x6301;&#x62D6;&#x62FD;&#x5230; org &#x6587;&#x6863;&#x4E2D;, emacs &#x4F1A;&#x81EA;&#x52A8;&#x521B;&#x5EFA;&#x6587;&#x7AE0;&#x540C;&#x540D;&#x6587;&#x4EF6;&#x5939;&#x5E76;&#x5F02;&#x6B65;&#x4E0B;&#x8F7D;&#x56FE;&#x7247;, &#x5728;&#x5149;&#x6807;&#x6240;&#x5728;&#x5904;&#x81EA;&#x52A8;&#x63D2;&#x5165;&#x5BF9;&#x5E94;&#x7684;&#x5F15;&#x7528;&#x4EE3;&#x7801;.</p><p>&#x4F7F;&#x7528;&#x672C;&#x529F;&#x80FD;&#x5FC5;&#x987B;&#x914D;&#x7F6E; org &#x6587;&#x6863;&#x5BFC;&#x51FA;&#x65F6;&#x5FFD;&#x7565; <code>_</code> &#x5B57;&#x7B26;&#x7684;&#x5904;&#x7406;, &#x5426;&#x5219;&#x5904;&#x7406; <code>asset_img</code> &#x65F6;&#x4F1A;&#x5F15;&#x8D77;&#x62A5;&#x9519;.</p><div class="org-src-container"><label class="org-src-name"><span class="listing-number">Listing 1: </span>emacs &#x914D;&#x7F6E;&#x4E2D;&#x52A0;&#x5165; org export &#x8BBE;&#x7F6E;</label><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">with-eval-after-load</span> <span class="quoted">&apos;ox</span></span><br><span class="line">  <span class="comment">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span></span><br><span class="line">  <span class="comment">;; disable interpret &quot;_&quot; and &quot;^&quot; for export ;;</span></span><br><span class="line">  <span class="comment">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span></span><br><span class="line">  <span class="list">(<span class="keyword">setq</span> org-export-with-sub-superscripts <span class="literal">nil</span>)</span>)</span></span><br></pre></td></tr></table></figure></div></div></div><div id="outline-container-org0e26ec3" class="outline-2"><h2 id="org0e26ec3"><span class="section-number-2">4</span> &#x914D;&#x5408; Hexo &#x4E3B;&#x9898;: NexT</h2><div class="outline-text-2" id="text-4"><p>&#x672C;&#x7F51;&#x7AD9;&#x91C7;&#x7528;&#x4E86;&#x6F02;&#x4EAE;&#x6210;&#x719F;&#x7684;&#x4E3B;&#x9898; <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">NexT <i class="fa fa-external-link" aria-hidden="true"></i></a> 6.0.</p><p>&#x4EE5;&#x4E0B;&#x662F;&#x6211;&#x4F7F;&#x7528; hexo-renderer-org &#x914D;&#x5408; NexT &#x4E3B;&#x9898;&#x7684;&#x7684;&#x4E00;&#x4E9B;&#x8C03;&#x4F18;.</p><p><div class="note warning">            <p>spacemacs 用户配置</p>          </div></p><p>&#x4F7F;&#x7528;&#x65B9;&#x5F0F;: &#x5728; <code>.spacemacs</code> &#x6587;&#x4EF6;&#x7684; <code>dotspacemacs/user-config</code> &#x4E2D;&#x6DFB;&#x52A0;</p><div class="org-src-container"><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">load</span> <span class="string">&quot;~/.emacs.d/config-hexo.el&quot;</span>)</span></span><br></pre></td></tr></table></figure></div><p>&#x5728; <code>~/.emacs.d/</code> &#x6587;&#x4EF6;&#x5939;&#x4E2D;&#x521B;&#x5EFA; <code>config-hexo.el</code> &#x6DFB;&#x52A0;&#x4EE5;&#x4E0B;&#x4EE3;&#x7801;</p><div class="org-src-container"><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span></span><br><span class="line"><span class="comment">;; customization for using hexo-renderer-org to generate hexo static web pages ;;</span></span><br><span class="line"><span class="comment">;;                                                                             ;;</span></span><br><span class="line"><span class="comment">;; using themes/next https://theme-next.org/                                   ;;</span></span><br><span class="line"><span class="comment">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> hexo-theme-next/link-add-font-awesome <span class="list">(<span class="keyword">text</span> backend info)</span></span><br><span class="line">  <span class="string">&quot;Add fa-external-link class to &lt;a&gt; element.&quot;</span></span><br><span class="line">  <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">fa-external-element</span> <span class="string">&quot;&lt;i class=&apos;fa fa-external-link&apos; aria-hidden=&apos;true&apos;&gt;&lt;/i&gt;&lt;/a&gt;&quot;</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">when</span> <span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">eq</span> backend <span class="quoted">&apos;hexo-html</span>)</span></span><br><span class="line">               <span class="list">(<span class="keyword">not</span> <span class="list">(<span class="keyword">string-match-p</span> fa-external-element text)</span>)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">replace-regexp-in-string</span> <span class="string">&quot;&lt;/a&gt;&quot;</span> <span class="list">(<span class="keyword">concat</span> <span class="string">&quot; &quot;</span> fa-external-element)</span> text)</span></span><br><span class="line">      )</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> hexo-theme-next/center-quote <span class="list">(<span class="keyword">text</span> backend info)</span></span><br><span class="line">  <span class="string">&quot;Transcode a CENTER-BLOCK from org to hexo theme/next centerquote tag plugin.&quot;</span></span><br><span class="line">  <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">blockquote-tag-start</span> <span class="string">&quot;&lt;blockquote class=&apos;blockquote-center&apos;&gt;&quot;</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword">blockqoute-tag-end</span> <span class="string">&quot;&lt;/blockquote&gt;&quot;</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">when</span> <span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">eq</span> backend <span class="quoted">&apos;hexo-html</span>)</span></span><br><span class="line">               <span class="list">(<span class="keyword">not</span> <span class="list">(<span class="keyword">string-match-p</span> blockquote-tag-start text)</span>)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">let*</span> <span class="list">(<span class="list">(<span class="keyword">result</span> text)</span></span><br><span class="line">             <span class="list">(<span class="keyword">result</span> <span class="list">(<span class="keyword">replace-regexp-in-string</span> <span class="string">&quot;&lt;div class=\&quot;org-center\&quot;&gt;&quot;</span> blockquote-tag-start result)</span>)</span></span><br><span class="line">             <span class="list">(<span class="keyword">result</span> <span class="list">(<span class="keyword">replace-regexp-in-string</span> <span class="string">&quot;&lt;/div&gt;&quot;</span> blockqoute-tag-end result)</span>)</span>)</span></span><br><span class="line">        result)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">with-eval-after-load</span> <span class="quoted">&apos;ox</span></span><br><span class="line">  <span class="comment">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span></span><br><span class="line">  <span class="comment">;; disable interpret &quot;_&quot; and &quot;^&quot; for export ;;</span></span><br><span class="line">  <span class="comment">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span></span><br><span class="line">  <span class="list">(<span class="keyword">setq</span> org-export-with-sub-superscripts <span class="literal">nil</span>)</span></span><br><span class="line"></span><br><span class="line">  <span class="list">(<span class="keyword">add-to-list</span> <span class="quoted">&apos;org-export-filter-link-functions</span> <span class="quoted">#&apos;hexo-theme-next/link-add-font-awesome</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">add-to-list</span> <span class="quoted">&apos;org-export-filter-center-block-functions</span> <span class="quoted">#&apos;hexo-theme-next/center-quote</span>)</span></span><br><span class="line">  )</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">with-eval-after-load</span> <span class="quoted">&apos;ox-html</span></span><br><span class="line">  <span class="comment">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span></span><br><span class="line">  <span class="comment">;; todo keyword use theme/next label CSS class ;;</span></span><br><span class="line">  <span class="comment">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span></span><br><span class="line">  <span class="list">(<span class="keyword">setq</span> org-html-todo-kwd-class-prefix <span class="string">&quot;label warning &quot;</span>)</span></span><br><span class="line"></span><br><span class="line">  <span class="list">(<span class="keyword">setq</span> org-html-postamble-format</span><br><span class="line">        <span class="quoted">&apos;((<span class="string">&quot;en&quot;</span></span><br><span class="line">           <span class="string">&quot;&lt;p style=&apos;font-size: .7em; font-style: italic&apos;&gt;Generated using %c&lt;/p&gt;&quot;</span>)</span><br><span class="line">          )</span>)</span></span><br><span class="line">  <span class="comment">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span></span><br><span class="line">  <span class="comment">;; generate TOC using hexo theme/next tabs plugin at the top of article ;;</span></span><br><span class="line">  <span class="comment">;;                                                                      ;;</span></span><br><span class="line">  <span class="comment">;; redefine org-html-toc                                                ;;</span></span><br><span class="line">  <span class="comment">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span></span><br><span class="line">  <span class="list">(<span class="keyword">defun</span> org-html-toc <span class="list">(<span class="keyword">depth</span> info <span class="keyword">&amp;optional</span> scope)</span></span><br><span class="line">    <span class="string">&quot;Build a table of contents.</span><br><span class="line">DEPTH is an integer specifying the depth of the table.  INFO is</span><br><span class="line">a plist used as a communication channel.  Optional argument SCOPE</span><br><span class="line">is an element defining the scope of the table.  Return the table</span><br><span class="line">of contents as a string, or nil if it is empty.&quot;</span></span><br><span class="line">    <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">toc-entries</span></span><br><span class="line">           <span class="list">(<span class="keyword">mapcar</span> <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">headline</span>)</span></span><br><span class="line">                     <span class="list">(<span class="keyword">cons</span> <span class="list">(<span class="keyword">org-html--format-toc-headline</span> headline info)</span></span><br><span class="line">                           <span class="list">(<span class="keyword">org-export-get-relative-level</span> headline info)</span>)</span>)</span></span><br><span class="line">                   <span class="list">(<span class="keyword">org-export-collect-headlines</span> info depth scope)</span>)</span>)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">when</span> toc-entries</span><br><span class="line">        <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">toc</span> <span class="list">(<span class="keyword">concat</span> <span class="string">&quot;&lt;ul class=\&quot;nav-tabs\&quot;&gt;\n&quot;</span></span><br><span class="line">                           <span class="list">(<span class="keyword">hexo-theme-next/toc-nav-tabs</span> toc-entries)</span></span><br><span class="line">                           <span class="string">&quot;&lt;/ul&gt;&quot;</span></span><br><span class="line">                           <span class="string">&quot;&lt;div class=\&quot;tab-content\&quot;&gt;\n&quot;</span></span><br><span class="line">                           <span class="list">(<span class="keyword">hexo-theme-next/toc-text</span> toc-entries)</span></span><br><span class="line">                           <span class="string">&quot;&lt;/div&gt;\n&quot;</span></span><br><span class="line">                           )</span>)</span>)</span></span><br><span class="line">          <span class="list">(<span class="keyword">if</span> scope toc</span><br><span class="line">            <span class="list">(<span class="keyword">concat</span>  <span class="string">&quot;&lt;div class=\&quot;tabs\&quot; id=\&quot;org-toc\&quot; style=\&quot;font-size: 12px;\&quot;&gt;\n&quot;</span></span><br><span class="line">                     toc</span><br><span class="line">                     <span class="string">&quot;&lt;/div&gt;\n&quot;</span> )</span>)</span></span><br><span class="line">          )</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line">  <span class="list">(<span class="keyword">defun</span> hexo-theme-next/get-href <span class="list">(<span class="keyword">headline</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">string-match</span> <span class="string">&quot;href=\&quot;#\\(.*\\)\&quot;&quot;</span> headline)</span></span><br><span class="line">        <span class="list">(<span class="keyword">match-string-no-properties</span> <span class="number">1</span> headline)</span></span><br><span class="line">      <span class="string">&quot;&quot;</span>)</span>)</span></span><br><span class="line"></span><br><span class="line">  <span class="list">(<span class="keyword">defun</span> hexo-theme-next/toc-nav-tabs <span class="list">(<span class="keyword">toc-entries</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">mapconcat</span></span><br><span class="line">     <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">entry</span>)</span></span><br><span class="line">       <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">headline</span> <span class="list">(<span class="keyword">car</span> entry)</span>)</span></span><br><span class="line">             <span class="list">(<span class="keyword">level</span> <span class="list">(<span class="keyword">cdr</span> entry)</span>)</span>)</span></span><br><span class="line">         <span class="list">(<span class="keyword">when</span> <span class="list">(<span class="keyword">=</span> level <span class="number">1</span>)</span></span><br><span class="line">           <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">ahref</span> <span class="list">(<span class="keyword">hexo-theme-next/get-href</span> headline)</span>)</span>)</span></span><br><span class="line">             <span class="list">(<span class="keyword">concat</span> <span class="string">&quot;&lt;li class=\&quot;tab\&quot;&gt;\n&quot;</span></span><br><span class="line">                     <span class="list">(<span class="keyword">replace-regexp-in-string</span></span><br><span class="line">                      <span class="string">&quot;&lt;a href&quot;</span></span><br><span class="line">                      <span class="string">&quot;&lt;a class=\&quot;btn\&quot; href&quot;</span></span><br><span class="line">                      <span class="list">(<span class="keyword">replace-regexp-in-string</span> ahref <span class="list">(<span class="keyword">concat</span> <span class="string">&quot;tab-&quot;</span> ahref)</span> headline)</span>)</span></span><br><span class="line">                     <span class="string">&quot;&lt;/li&gt;\n&quot;</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line">     toc-entries <span class="string">&quot;&quot;</span>)</span>)</span></span><br><span class="line"></span><br><span class="line">  <span class="list">(<span class="keyword">defun</span> hexo-theme-next/toc-text <span class="list">(<span class="keyword">toc-entries</span>)</span></span><br><span class="line">    <span class="string">&quot;Return innards of a table of contents, as a string.</span><br><span class="line">TOC-ENTRIES is an alist where key is an entry title, as a string,</span><br><span class="line">and value is its relative level, as an integer.&quot;</span></span><br><span class="line">    <span class="list">(<span class="keyword">let*</span> <span class="list">(<span class="list">(<span class="keyword">prev-level</span> <span class="list">(<span class="number">1</span>- <span class="list">(<span class="keyword">cdar</span> toc-entries)</span>)</span>)</span></span><br><span class="line">           <span class="list">(<span class="keyword">start-level</span> prev-level)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">concat</span></span><br><span class="line">       <span class="list">(<span class="keyword">mapconcat</span></span><br><span class="line">        <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">entry</span>)</span></span><br><span class="line">          <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">headline</span> <span class="list">(<span class="keyword">car</span> entry)</span>)</span></span><br><span class="line">                <span class="list">(<span class="keyword">level</span> <span class="list">(<span class="keyword">cdr</span> entry)</span>)</span>)</span></span><br><span class="line">            <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">ahref</span> <span class="list">(<span class="keyword">hexo-theme-next/get-href</span> headline )</span>)</span>)</span></span><br><span class="line">              <span class="list">(<span class="keyword">concat</span></span><br><span class="line">               <span class="list">(<span class="keyword">let*</span> <span class="list">(<span class="list">(<span class="keyword">cnt</span> <span class="list">(<span class="keyword">-</span> level prev-level)</span>)</span></span><br><span class="line">                      <span class="list">(<span class="keyword">times</span> <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">&gt;</span> cnt <span class="number">0</span>)</span> <span class="list">(<span class="number">1</span>- cnt)</span> <span class="list">(<span class="keyword">-</span> cnt)</span>)</span>)</span>)</span></span><br><span class="line">                 <span class="list">(<span class="keyword">setq</span> prev-level level)</span></span><br><span class="line">                 <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">&gt;</span> cnt <span class="number">0</span>)</span></span><br><span class="line">                     <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">=</span> level <span class="number">1</span>)</span></span><br><span class="line">                            <span class="list">(<span class="keyword">format</span> <span class="string">&quot;&lt;div class=\&quot;tab-pane\&quot; id=\&quot;%s\&quot;&gt;\n&lt;ul&gt;\n&quot;</span></span><br><span class="line">                                    <span class="list">(<span class="keyword">concat</span> <span class="string">&quot;tab-&quot;</span> ahref)</span>)</span>)</span></span><br><span class="line">                           <span class="list">(<span class="list">(<span class="keyword">&gt;</span> level <span class="number">1</span>)</span></span><br><span class="line">                            <span class="string">&quot;&lt;li&gt;\n&quot;</span>)</span>)</span></span><br><span class="line">                   <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">=</span> level <span class="number">1</span>)</span></span><br><span class="line">                          <span class="list">(<span class="keyword">format</span> <span class="string">&quot;&lt;/ul&gt;\n&lt;/div&gt;\n&lt;div class=\&quot;tab-pane\&quot; id=\&quot;%s\&quot;&gt;\n&lt;ul&gt;\n&quot;</span></span><br><span class="line">                                  <span class="list">(<span class="keyword">concat</span> <span class="string">&quot;tab-&quot;</span> ahref)</span>)</span>)</span></span><br><span class="line">                         <span class="list">(<span class="list">(<span class="keyword">&gt;</span> level <span class="number">1</span>)</span></span><br><span class="line">                          <span class="string">&quot;&lt;/li&gt;\n&lt;li&gt;\n&quot;</span>)</span>)</span>)</span>)</span></span><br><span class="line">               headline)</span>)</span>)</span>)</span></span><br><span class="line">        toc-entries <span class="string">&quot;&quot;</span>)</span></span><br><span class="line">       <span class="string">&quot;&lt;/div&gt;&quot;</span></span><br><span class="line">       )</span>)</span>)</span></span><br><span class="line">  )</span></span><br></pre></td></tr></table></figure></div><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="org-left"><col class="org-left"></colgroup><thead><tr><th scope="col" class="org-left">&#xA0;</th><th scope="col" class="org-left">&#x529F;&#x80FD;</th></tr></thead><tbody><tr><td class="org-left">hexo-theme-next/link-add-font-awesome</td><td class="org-left">&#x5C06;&#x6240;&#x6709;&#x94FE;&#x63A5;&#x540E;&#x63D2;&#x5165; font awesome <a href="https://fontawesome.com/v4.7.0/icon/external-link/" target="_blank" rel="noopener">&#x7BAD;&#x5934;&#x56FE;&#x6807; <i class="fa fa-external-link" aria-hidden="true"></i></a></td></tr><tr><td class="org-left">hexo-theme-next/center-quote</td><td class="org-left">&#x5C06; org &#x7684; <code>#+BEGIN_CENTER</code> &#x4EE3;&#x7801;&#x5757;&#x8F6C;&#x6362;&#x4E3A; NexT &#x7684; <a href="https://theme-next.org/docs/tag-plugins/#Centered-Quote" target="_blank" rel="noopener">centerquote <i class="fa fa-external-link" aria-hidden="true"></i></a> &#x6807;&#x7B7E;</td></tr><tr><td class="org-left">org-html-todo-kwd-class-prefix</td><td class="org-left">&#x7ED9;&#x6807;&#x9898;&#x4E2D;&#x7684; TODO &#x5173;&#x952E;&#x5B57;&#x52A0;&#x4E0A; NexT &#x7684; <a href="https://theme-next.org/docs/tag-plugins/label/" target="_blank" rel="noopener">label <i class="fa fa-external-link" aria-hidden="true"></i></a> &#x6837;&#x5F0F;</td></tr><tr><td class="org-left">org-html-postamble-format</td><td class="org-left">&#x914D;&#x5408; <code>_config.yml</code> &#x4E2D; <code>postamble:t</code> &#x4F7F;&#x7528;, &#x81EA;&#x52A8;&#x5728;&#x6587;&#x7AE0;&#x672B;&#x5C3E;&#x52A0;&#x4E0A; Generated &#x6587;&#x5B57;</td></tr><tr><td class="org-left">org-html-toc</td><td class="org-left">&#x5C06;&#x6587;&#x7AE0;&#x5F00;&#x5934; org &#x81EA;&#x52A8;&#x751F;&#x6210;&#x7684; Table of Content &#x8F6C;&#x6362;&#x6210; NexT &#x6F02;&#x4EAE;&#x7684; <a href="https://theme-next.org/docs/tag-plugins/tabs/" target="_blank" rel="noopener">tabs &#x6807;&#x7B7E; <i class="fa fa-external-link" aria-hidden="true"></i></a></td></tr></tbody></table></div></div><div id="outline-container-orgcdf7edf" class="outline-2"><h2 id="orgcdf7edf"><span class="section-number-2">5</span> &#x6280;&#x5DE7;</h2><div class="outline-text-2" id="text-5"><p>&#x6709;&#x65F6;&#x5019;&#x9700;&#x8981;&#x76F4;&#x63A5;&#x5728; org &#x6587;&#x6863;&#x4E2D;&#x5305;&#x542B; hexo &#x7279;&#x6B8A;&#x6807;&#x7B7E;&#x5B57;&#x7B26;&#x65F6;&#x4F1A; <code>hexo g</code> &#x4F1A;&#x51FA;&#x9519;, &#x6216;&#x8005;&#x8F93;&#x51FA;&#x4F1A;&#x6D88;&#x5931;, &#x6BD4;&#x5982;&#x672C;&#x6587;&#x4E2D;&#x7684; {%% asset_img %%} {% asset_img %} .</p><p>&#x8FD9;&#x662F;&#x56E0;&#x4E3A;&#x8FD9;&#x4E9B;&#x5B57;&#x7B26;&#x4F1A;&#x88AB; Hexo &#x5F15;&#x64CE;&#x7279;&#x6B8A;&#x5904;&#x7406;, &#x5F53;&#x4F60;&#x9700;&#x8981;&#x8F93;&#x51FA;&#x8FD9;&#x4E9B;&#x7279;&#x6B8A;&#x5B57;&#x7B26;, &#x53EF;&#x4EE5;&#x5728;&#x5916;&#x9762;&#x7528; raw &#x6807;&#x7B7E;&#x5305;&#x56F4;, &#x8FD9;&#x6837; hexo &#x5F15;&#x64CE;&#x5C31;&#x4E0D;&#x4F1A;&#x5904;&#x7406;&#x8FD9;&#x4E9B;&#x5B57;&#x7B26;&#x4E86;.</p><p></p><pre class="example">{% raw %}{% asset_img %}{% endraw %}</pre><p></p></div></div><div id="footnotes"><h2 class="footnotes">Footnotes: </h2><div id="text-footnotes"><div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">hexo-renderer-org &#x6700;&#x65E9;&#x662F; <a href="https://github.com/coldnew/hexo-renderer-org" target="_blank" rel="noopener">coldnew <i class="fa fa-external-link" aria-hidden="true"></i></a> &#x5F00;&#x53D1;&#x7684;, &#x4F46;&#x662F;&#x5DF2;&#x7ECF;&#x505C;&#x6B62;&#x7EF4;&#x62A4;&#x4E86;,emacs &#x5347;&#x7EA7;&#x5230; 26.1 &#x4E4B;&#x540E;&#x4E0D;&#x80FD;&#x4F7F;&#x7528;.</p><p class="footpara"><a href="https://github.com/MephistoMMM/hexo-renderer-org" target="_blank" rel="noopener">MephistoMMM <i class="fa fa-external-link" aria-hidden="true"></i></a> &#x4FEE;&#x590D;&#x4E86;&#x95EE;&#x9898;, &#x6211;&#x81EA;&#x5DF1; fork &#x4E4B;&#x540E;&#x53C8;&#x4FEE;&#x590D;&#x4E86;&#x51E0;&#x4E2A;&#x95EE;&#x9898;, &#x76EE;&#x524D;&#x5DF2;&#x7ECF;&#x53EF;&#x4EE5;&#x7A33;&#x5B9A;&#x4F7F;&#x7528;.</p></div></div></div></div></div><div id="postamble" class="status"><p style="font-size: .7em; font-style: italic">Generated using <a href="https://www.gnu.org/software/emacs/" target="_blank" rel="noopener">Emacs</a> 26.1 (<a href="https://orgmode.org" target="_blank" rel="noopener">Org</a> mode 9.1.14)</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;content&quot;&gt;
&lt;div class=&quot;tabs&quot; id=&quot;org-toc&quot; style=&quot;font-size: 12px;&quot;&gt;
&lt;ul class=&quot;nav-tabs&quot;&gt;
&lt;li class=&quot;tab&quot;&gt;
&lt;a class=&quot;btn&quot; href=&quot;#tab
      
    
    </summary>
    
    
      <category term="Emacs" scheme="http://mpwang.github.io/tags/Emacs/"/>
    
      <category term="Hexo" scheme="http://mpwang.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>org 文档使用 ob-ipython 进行 python literal programming</title>
    <link href="http://mpwang.github.io/2019/02/07/how-to-use-ob-ipython/"/>
    <id>http://mpwang.github.io/2019/02/07/how-to-use-ob-ipython/</id>
    <published>2019-02-07T14:25:37.000Z</published>
    <updated>2019-02-09T19:25:11.034Z</updated>
    
    <content type="html"><![CDATA[<div id="content"><div class="tabs" id="org-toc" style="font-size: 12px;"><ul class="nav-tabs"><li class="tab"><a class="btn" href="#tab-org192ccf7">1. ob-ipython</a></li><li class="tab"><a class="btn" href="#tab-orgcdc6486">2. &#x5B89;&#x88C5;</a></li><li class="tab"><a class="btn" href="#tab-org1745cab">3. &#x914D;&#x7F6E;</a></li><li class="tab"><a class="btn" href="#tab-org6d3674a">4. &#x4F7F;&#x7528; yasnippet</a></li><li class="tab"><a class="btn" href="#tab-org83d304b">5. &#x663E;&#x793A;&#x56FE;&#x7247;&#x53CA;&#x8868;&#x683C;</a></li><li class="tab"><a class="btn" href="#tab-orgefb17c9">6. Enjoy</a></li></ul><div class="tab-content"><div class="tab-pane" id="tab-org192ccf7"><ul><a href="#org192ccf7">1. ob-ipython</a></ul></div><div class="tab-pane" id="tab-orgcdc6486"><ul><a href="#orgcdc6486">2. &#x5B89;&#x88C5;</a><li><a href="#orgf9a79b9">2.1. &#x5B89;&#x88C5; ob-ipython</a></li><li><a href="#org29d544e">2.2. &#x5B89;&#x88C5; jupyter</a></li><li><a href="#org472a580">2.2.1. &#x624B;&#x52A8;&#x5B89;&#x88C5; jupyter</a></li><li><a href="#org22b3442">2.2.2. &#x4F7F;&#x7528; use-package</a></li></ul></div><div class="tab-pane" id="tab-org1745cab"><ul><a href="#org1745cab">3. &#x914D;&#x7F6E;</a></ul></div><div class="tab-pane" id="tab-org6d3674a"><ul><a href="#org6d3674a">4. &#x4F7F;&#x7528; yasnippet</a></ul></div><div class="tab-pane" id="tab-org83d304b"><ul><a href="#org83d304b">5. &#x663E;&#x793A;&#x56FE;&#x7247;&#x53CA;&#x8868;&#x683C;</a></ul></div><div class="tab-pane" id="tab-orgefb17c9"><ul><a href="#orgefb17c9">6. Enjoy</a></ul></div></div></div><div id="outline-container-org192ccf7" class="outline-2"><h2 id="org192ccf7"><span class="section-number-2">1</span> ob-ipython</h2><div class="outline-text-2" id="text-1"><p>&#x4F7F;&#x7528; <a href="https://github.com/gregsexton/ob-ipython" target="_blank" rel="noopener"><code>ob-ipython</code> <i class="fa fa-external-link" aria-hidden="true"></i></a> &#x53EF;&#x4EE5;&#x5728; org &#x6587;&#x6863;&#x5185;&#x8FD0;&#x884C;&#x4EE3;&#x7801;&#x5757;, &#x4EE3;&#x7801;&#x5757;&#x5185;&#x5BB9;&#x4F1A;&#x88AB;&#x53D1;&#x9001;&#x5230;&#x540E;&#x53F0;&#x7684;<code>Jupyter</code> &#x8FDB;&#x7A0B;&#x8FD0;&#x884C;, &#x8FD4;&#x56DE;&#x7ED3;&#x679C;&#x4F1A;&#x88AB;&#x63D2;&#x5165;&#x5230; org &#x6587;&#x6863;&#x4E2D;. org &#x6587;&#x6863;&#x4E30;&#x5BCC;&#x7684;&#x663E;&#x793A;&#x7C7B;&#x578B;&#x4F7F;&#x5F97;&#x4F7F;&#x7528; org &#x6587;&#x6863;&#x6765;&#x4EE3;&#x66FF; jupyter notebook &#x6210;&#x4E3A;&#x4E86;&#x4E00;&#x79CD;&#x4E0D;&#x9519;&#x7684;&#x4F53;&#x9A8C;.</p><p>&#x6548;&#x679C;&#x56FE;</p><p><img src="/2019/02/07/how-to-use-ob-ipython/screenshot.jpg"></p></div></div><div id="outline-container-orgcdc6486" class="outline-2"><h2 id="orgcdc6486"><span class="section-number-2">2</span> &#x5B89;&#x88C5;</h2><div class="outline-text-2" id="text-2"><p>&#x4EE5;&#x4E0B;&#x6307;&#x5F15;&#x9488;&#x5BF9; spacemacs &#x7528;&#x6237;, &#x5176;&#x5B83;&#x914D;&#x7F6E;&#x7684;&#x7528;&#x6237;&#x9700;&#x8981;&#x5728;&#x81EA;&#x5DF1;&#x7684;&#x914D;&#x7F6E;&#x4E2D;&#x6DFB;&#x52A0;&#x5BF9;&#x5E94;&#x7684;&#x8BBE;&#x7F6E;.</p></div><div id="outline-container-orgf9a79b9" class="outline-3"><h3 id="orgf9a79b9"><span class="section-number-3">2.1</span> &#x5B89;&#x88C5; ob-ipython</h3><div class="outline-text-3" id="text-2-1"><p>&#x5728; <code>dotspacemacs-additional-packages</code> &#x4E2D;&#x6DFB;&#x52A0; ob-ipython.</p><p><code>SPC f e R</code> &#x91CD;&#x65B0;&#x8F7D;&#x5165; spacemacs &#x914D;&#x7F6E;&#x6216;&#x8005;&#x91CD;&#x542F; spacemacs &#x4E0B;&#x8F7D;&#x5B89;&#x88C5; ob-ipython.</p></div></div><div id="outline-container-org29d544e" class="outline-3"><h3 id="org29d544e"><span class="section-number-3">2.2</span> &#x5B89;&#x88C5; jupyter</h3><div class="outline-text-3" id="text-2-2"></div><div id="outline-container-org472a580" class="outline-4"><h4 id="org472a580"><span class="section-number-4">2.2.1</span> &#x624B;&#x52A8;&#x5B89;&#x88C5; jupyter</h4><div class="outline-text-4" id="text-2-2-1"><p>python3 &#x5B89;&#x88C5; jupyter</p><div class="org-src-container"><figure class="highlight"><table><tr><td class="code"><pre><span class="line">pip3 install jupyter</span><br></pre></td></tr></table></figure></div></div></div><div id="outline-container-org22b3442" class="outline-4"><h4 id="org22b3442"><span class="section-number-4">2.2.2</span> &#x4F7F;&#x7528; use-package</h4><div class="outline-text-4" id="text-2-2-2"><p>&#x5728; <code>dotspacemacs/user-config</code> &#x4E2D;&#x6DFB;&#x52A0;</p><div class="org-src-container"><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">use-package</span> use-package-ensure-system-package</span><br><span class="line">  <span class="keyword">:ensure</span> <span class="literal">t</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">use-package</span> ob-ipython</span><br><span class="line">  <span class="keyword">:ensure-system-package</span> <span class="list">(<span class="list">(<span class="keyword">jupyter</span> . <span class="string">&quot;pip3 install jupyter&quot;</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure></div><p>&#x4F7F;&#x7528; use-package &#x7684; <a href="https://github.com/jwiegley/use-package#use-package-ensure-system-package" target="_blank" rel="noopener">use-package-ensure-system-package <i class="fa fa-external-link" aria-hidden="true"></i></a> &#x529F;&#x80FD;, &#x5982;&#x679C;&#x7CFB;&#x7EDF; <code>PATH</code> &#x4E2D;&#x6CA1;&#x6709; jupyter, &#x81EA;&#x52A8;&#x8FD0;&#x884C;&#x4E0B;&#x8F7D;&#x547D;&#x4EE4;.</p><p><code>SPC f e R</code> &#x91CD;&#x65B0;&#x8F7D;&#x5165; spacemacs &#x914D;&#x7F6E;.</p></div></div></div></div><div id="outline-container-org1745cab" class="outline-2"><h2 id="org1745cab"><span class="section-number-2">3</span> &#x914D;&#x7F6E;</h2><div class="outline-text-2" id="text-3"><p>&#x5728; <code>dotspacemacs/user-config</code> &#x4E2D;&#x6DFB;&#x52A0;</p><div class="org-src-container"><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; &#x8BBE;&#x7F6E; python &#x89E3;&#x6790;&#x5668;&#x8DEF;&#x5F84;</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> python-shell-interpreter <span class="string">&quot;/usr/local/bin/python3&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">with-eval-after-load</span> <span class="quoted">&apos;org</span></span><br><span class="line">  <span class="list">(<span class="keyword">add-to-list</span> <span class="quoted">&apos;org-babel-load-languages</span> <span class="quoted">&apos;(ipython . t)</span>)</span></span><br><span class="line">  <span class="comment">;; &#x4E0D;&#x518D;&#x8BE2;&#x95EE;&#x662F;&#x5426;&#x5141;&#x8BB8;&#x6267;&#x884C;&#x4EE3;&#x7801;&#x5757;</span></span><br><span class="line">  <span class="list">(<span class="keyword">setq</span> org-confirm-babel-evaluate <span class="literal">nil</span>)</span></span><br><span class="line">  <span class="comment">;; display/update images in the buffer after I evaluate</span></span><br><span class="line">  <span class="list">(<span class="keyword">add-hook</span> <span class="quoted">&apos;org-babel-after-execute-hook</span> <span class="quoted">&apos;org-display-inline-images</span> <span class="quoted">&apos;append</span>)</span></span><br><span class="line">  )</span></span><br></pre></td></tr></table></figure></div></div></div><div id="outline-container-org6d3674a" class="outline-2"><h2 id="org6d3674a"><span class="section-number-2">4</span> &#x4F7F;&#x7528; yasnippet</h2><div class="outline-text-2" id="text-4"><p>&#x4F7F;&#x7528; <a href="https://github.com/joaotavora/yasnippet" target="_blank" rel="noopener">yasnippet <i class="fa fa-external-link" aria-hidden="true"></i></a> &#x5E2E;&#x52A9;&#x4F60;&#x5FEB;&#x901F;&#x7684;&#x521B;&#x5EFA; ipython &#x4EE3;&#x7801;&#x5757;.</p><p>&#x6253;&#x5F00; org &#x6587;&#x6863;, &#x70B9;&#x51FB;&#x83DC;&#x5355; YASnippet <code>New snippet</code>, &#x7C98;&#x8D34;&#x4EE5;&#x4E0B;&#x5185;&#x5BB9;, &#x4FDD;&#x5B58;.</p><div class="org-src-container"><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># -*- mode: snippet -*-# name: ipython block# key: srcip# --#+BEGIN_SRC ipython :session ${1::ipyfile ${2:$$(let ((temporary-file-directory &quot;./&quot;)) (make-temp-file (concat (file-name-sans-extension (file-name-nondirectory buffer-file-name)) &quot;-py&quot;) nil &quot;.png&quot;))} }:exports ${3:both} :results raw drawer$0#+END_SRC</span><br></pre></td></tr></table></figure></div><p>&#x73B0;&#x5728;&#x4F60;&#x53EF;&#x4EE5;&#x5728; org &#x6587;&#x6863;&#x4E2D;&#x8F93;&#x5165;&#x5173;&#x952E;&#x5B57; <code>srcip</code> &#x7136;&#x540E;&#x4F7F;&#x7528; <code>M-/</code> &#x81EA;&#x52A8;&#x6269;&#x5C55;, &#x7136;&#x540E;&#x8FDE;&#x7EED;&#x6309;&#x4E0B; <code>TAB</code> &#x81EA;&#x52A8;&#x751F;&#x6210;&#x7C7B;&#x4F3C;&#x4EE5;&#x4E0B;&#x7684;&#x4EE3;&#x7801;</p><div class="org-src-container"><figure class="highlight"><table><tr><td class="code"><pre><span class="line">#+BEGIN_SRC ipython :session :ipyfile /Users/mpwang/org/test-py9bDtND.png :exports both :results raw drawer#+END_SRC</span><br></pre></td></tr></table></figure></div><p>&#x5047;&#x8BBE;&#x4F60;&#x7684; org &#x6587;&#x4EF6;&#x540D;&#x4E3A; test.org, &#x5982;&#x679C;&#x4F60;&#x7684;&#x4EE3;&#x7801;&#x5757;&#x4F1A;&#x751F;&#x6210;&#x56FE;&#x7247;, &#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x4F1A;&#x81EA;&#x52A8;&#x521B;&#x5EFA;&#x968F;&#x673A;&#x751F;&#x6210;&#x7684;&#x4EE5; test &#x5F00;&#x5934;&#x7684;&#x6587;&#x4EF6;&#x540D; <code>test-py9bDtND.png</code> &#x4FDD;&#x5B58;&#x56FE;&#x7247;.</p></div></div><div id="outline-container-org83d304b" class="outline-2"><h2 id="org83d304b"><span class="section-number-2">5</span> &#x663E;&#x793A;&#x56FE;&#x7247;&#x53CA;&#x8868;&#x683C;</h2><div class="outline-text-2" id="text-5"><p><a href="https://ipython.org/ipython-doc/1/config/overview.html#startup-files" target="_blank" rel="noopener">ipython startup files <i class="fa fa-external-link" aria-hidden="true"></i></a></p><p>&#x8BBE;&#x7F6E; ipython startup &#x6587;&#x4EF6;&#x8BA9; org &#x6587;&#x6863;&#x663E;&#x793A;&#x56FE;&#x7247;&#x4EE5;&#x53CA;&#x8868;&#x683C;</p><p>&#x5728; <code>~/.ipython/profile_default/startup</code> &#x4E2D;&#x6DFB;&#x52A0; ob-ipython.py &#x6587;&#x4EF6;, &#x63D2;&#x5165;&#x4EE5;&#x4E0B;&#x5185;&#x5BB9;, &#x4FDD;&#x5B58;.</p><div class="org-src-container"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> IPython</span><br><span class="line"><span class="keyword">from</span> tabulate <span class="keyword">import</span> tabulate</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrgFormatter</span><span class="params">(IPython.core.formatters.BaseFormatter)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> tabulate(obj, headers=<span class="string">&apos;keys&apos;</span>,</span><br><span class="line">                            tablefmt=<span class="string">&apos;orgtbl&apos;</span>, showindex=<span class="string">&apos;always&apos;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">ip = get_ipython()</span><br><span class="line">ip.display_formatter.formatters[<span class="string">&apos;text/org&apos;</span>] = OrgFormatter()</span><br></pre></td></tr></table></figure></div></div></div><div id="outline-container-orgefb17c9" class="outline-2"><h2 id="orgefb17c9"><span class="section-number-2">6</span> Enjoy</h2><div class="outline-text-2" id="text-6"><p>&#x73B0;&#x5728;&#x4F60;&#x5DF2;&#x7ECF;&#x53EF;&#x4EE5;&#x5728; org &#x6587;&#x6863;&#x4EE3;&#x7801;&#x5757;&#x4E2D;&#x4F7F;&#x7528; <code>C-c C-c</code> &#x6267;&#x884C; python &#x4EE3;&#x7801;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;&#x5728; org&#x6587;&#x6863;&#x4E2D;&#x6F02;&#x4EAE;&#x5730;&#x663E;&#x793A;&#x56FE;&#x7247;&#x4EE5;&#x53CA;&#x8868;&#x683C;&#x4E86;.</p><blockquote class="blockquote-center"><p>Emacs Rocks!</p></blockquote></div></div></div><div id="postamble" class="status"><p style="font-size: .7em; font-style: italic">Generated using <a href="https://www.gnu.org/software/emacs/" target="_blank" rel="noopener">Emacs</a> 26.1 (<a href="https://orgmode.org" target="_blank" rel="noopener">Org</a> mode 9.1.14)</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;content&quot;&gt;
&lt;div class=&quot;tabs&quot; id=&quot;org-toc&quot; style=&quot;font-size: 12px;&quot;&gt;
&lt;ul class=&quot;nav-tabs&quot;&gt;
&lt;li class=&quot;tab&quot;&gt;
&lt;a class=&quot;btn&quot; href=&quot;#tab
      
    
    </summary>
    
    
      <category term="Emacs" scheme="http://mpwang.github.io/tags/Emacs/"/>
    
      <category term="Python" scheme="http://mpwang.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>spacemacs 与 org-mode 配置与使用技巧</title>
    <link href="http://mpwang.github.io/2019/02/06/productivity/"/>
    <id>http://mpwang.github.io/2019/02/06/productivity/</id>
    <published>2019-02-05T17:13:00.000Z</published>
    <updated>2019-02-10T17:20:55.466Z</updated>
    
    <content type="html"><![CDATA[<div id="content"><div class="tabs" id="org-toc" style="font-size: 12px;"><ul class="nav-tabs"><li class="tab"><a class="btn" href="#tab-org9279dc0">1. Spacemacs &#x914D;&#x7F6E;</a></li><li class="tab"><a class="btn" href="#tab-org1c1919e">2. Spacemacs &#x7F8E;&#x5316;</a></li><li class="tab"><a class="btn" href="#tab-orgf0ca6f0">3. Spacemacs &#x4F7F;&#x7528;&#x6280;&#x5DE7;</a></li><li class="tab"><a class="btn" href="#tab-orge306e53">4. org-mode &#x4F7F;&#x7528;&#x6280;&#x5DE7;</a></li></ul><div class="tab-content"><div class="tab-pane" id="tab-org9279dc0"><ul><a href="#org9279dc0">1. Spacemacs &#x914D;&#x7F6E;</a><li><a href="#org2ac358e">1.1. &#x4F7F;&#x7528;&#x4E2D;&#x56FD;&#x955C;&#x50CF;</a></li><li><a href="#orgeeca0b6">1.2. &#x914D;&#x7F6E;&#x4EE3;&#x7406;</a></li><li><a href="#org5d94ba6">1.3. &#x4F7F;&#x7528; spacelpa</a></li></ul></div><div class="tab-pane" id="tab-org1c1919e"><ul><a href="#org1c1919e">2. Spacemacs &#x7F8E;&#x5316;</a><li><a href="#orge00c4be">2.1. &#x5B57;&#x4F53;</a></li><li><a href="#org66f67cb">2.2. &#x5B57;&#x4F53;: &#x4F7F;&#x7528; cnfonts &#x914D;&#x7F6E;&#x4E2D;&#x82F1;&#x6587;&#x5BF9;&#x9F50;</a></li><li><a href="#orgce95b94">2.2.1. &#x5B89;&#x88C5;</a></li><li><a href="#org8b3aa3e">2.2.2. &#x914D;&#x7F6E;</a></li><li><a href="#orgcb0a19e">2.2.3. &#x8BBE;&#x7F6E;&#x4E2D;&#x82F1;&#x6587;&#x5BF9;&#x9F50;</a></li><li><a href="#orga84f99f">2.3. <span class="todo TODO">TODO</span> &#x4E3B;&#x9898;: doom-themes</a></li><li><a href="#orgbe1fd21">2.4. <span class="todo TODO">TODO</span> solaire-mode:</a></li><li><a href="#orgf5ba627">2.5. mode line &#x663E;&#x793A;&#x65F6;&#x95F4;</a></li></ul></div><div class="tab-pane" id="tab-orgf0ca6f0"><ul><a href="#orgf0ca6f0">3. Spacemacs &#x4F7F;&#x7528;&#x6280;&#x5DE7;</a><li><a href="#orgd8eb0b3">3.1. &#x5BFC;&#x822A;: &#x4F7F;&#x7528; avy</a></li><li><a href="#org5cf8072">3.2. &#x641C;&#x7D22;: &#x4F7F;&#x7528; helm-swoop</a></li><li><a href="#orgc291c91">3.3. &#x641C;&#x7D22;: &#x4F7F;&#x7528;&#x5916;&#x90E8;&#x5DE5;&#x5177;&#x641C;&#x7D22;&#x6587;&#x4EF6;</a></li></ul></div><div class="tab-pane" id="tab-orge306e53"><ul><a href="#orge306e53">4. org-mode &#x4F7F;&#x7528;&#x6280;&#x5DE7;</a><li><a href="#org7ac687d">4.1. org-mode &#x914D;&#x7F6E;&#x91CD;&#x8981;&#x63D0;&#x793A;</a></li><li><a href="#org05b6632">4.2. &#x4E2D;&#x82F1;&#x6587;&#x4E4B;&#x95F4;&#x81EA;&#x52A8;&#x63D2;&#x5165;&#x7A7A;&#x683C;</a></li><li><a href="#orgb8e35e9">4.3. &#x8FD0;&#x884C; shell &#x547D;&#x4EE4;, &#x4E0D;&#x9700;&#x8981;&#x79BB;&#x5F00; emacs</a></li><li><a href="#orgdd20ed2">4.4. &#x5173;&#x95ED;&#x56FE;&#x7247;&#x663E;&#x793A;</a></li><li><a href="#orgdff2b9e">4.5. &#x8F6C;&#x4E49;</a></li><li><a href="#orgee8c10c">4.5.1. #+BEGIN_SRC &#x8F6C;&#x4E49;</a></li><li><a href="#orgbf3086b">4.5.2. org-table &#x4E2D;&#x8F6C;&#x4E49; <code>|</code> &#x5B57;&#x7B26;</a></li></ul></div></div></div><div id="outline-container-org9279dc0" class="outline-2"><h2 id="org9279dc0"><span class="section-number-2">1</span> Spacemacs &#x914D;&#x7F6E;</h2><div class="outline-text-2" id="text-1"><p><a href="http://spacemacs.org/" target="_blank" rel="noopener">Spacemacs <i class="fa fa-external-link" aria-hidden="true"></i></a> &#x96C6;&#x5408;&#x4E86; emacs &#x793E;&#x533A;&#x7684;&#x52AA;&#x529B;, &#x4E3A; emacs &#x63D0;&#x4F9B;&#x4E00;&#x4E2A;&#x6210;&#x719F;&#x7A33;&#x5B9A;, &#x5F00;&#x7BB1;&#x5373;&#x7528;&#x7684; emacs &#x914D;&#x7F6E;&#x505A;&#x4E86;&#x76F8;&#x5F53;&#x597D;&#x7684;&#x5DE5;&#x4F5C;. &#x4E2A;&#x4EBA;&#x4F7F;&#x7528; Spacemacs &#x4E5F;&#x6709;&#x76F8;&#x5F53;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;, &#x4EE5;&#x4E0B;&#x662F;&#x4E00;&#x4E9B;&#x914D;&#x7F6E; Spacemacs &#x7684; tips.</p></div><div id="outline-container-org2ac358e" class="outline-3"><h3 id="org2ac358e"><span class="section-number-3">1.1</span> &#x4F7F;&#x7528;&#x4E2D;&#x56FD;&#x955C;&#x50CF;</h3><div class="outline-text-3" id="text-1-1"><p>&#x5728; <code>dotspacemacs/user-init</code> &#x4E2D;&#x6DFB;&#x52A0; <a href="https://mirror.tuna.tsinghua.edu.cn/help/elpa/" target="_blank" rel="noopener">melpa &#x4E2D;&#x56FD;&#x955C;&#x50CF; <i class="fa fa-external-link" aria-hidden="true"></i></a></p><div class="org-src-container"><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"> <span class="comment">;; melpa china mirrors</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> configuration-layer--elpa-archives</span><br><span class="line">      <span class="quoted">&apos;((<span class="string">&quot;melpa-cn&quot;</span> . <span class="string">&quot;http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/&quot;</span>)</span><br><span class="line">        (<span class="string">&quot;org-cn&quot;</span>   . <span class="string">&quot;http://mirrors.tuna.tsinghua.edu.cn/elpa/org/&quot;</span>)</span><br><span class="line">        (<span class="string">&quot;gnu-cn&quot;</span>   . <span class="string">&quot;http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/&quot;</span>))</span>)</span></span><br></pre></td></tr></table></figure></div></div></div><div id="outline-container-orgeeca0b6" class="outline-3"><h3 id="orgeeca0b6"><span class="section-number-3">1.2</span> &#x914D;&#x7F6E;&#x4EE3;&#x7406;</h3><div class="outline-text-3" id="text-1-2"><p>&#x8FDE;&#x63A5;&#x56FD;&#x5916;&#x7684;&#x8F6F;&#x4EF6;&#x6E90;&#x7531;&#x4E8E;&#x7F51;&#x7EDC;&#x95EE;&#x9898;, &#x901A;&#x5E38;&#x8F83;&#x6162;. &#x53EF;&#x4EE5;&#x5728; <code>dotspacemacs/user-init</code> &#x4E2D;&#x8BBE;&#x7F6E;&#x4EE3;&#x7406;</p><div class="org-src-container"><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; proxy</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> url-proxy-services <span class="quoted">&apos;((<span class="string">&quot;no_proxy&quot;</span> . <span class="string">&quot;127.0.0.1&quot;</span>)</span><br><span class="line">                          (<span class="string">&quot;http&quot;</span> . <span class="string">&quot;127.0.0.1:1087&quot;</span>)</span><br><span class="line">                          (<span class="string">&quot;https&quot;</span> . <span class="string">&quot;127.0.0.1:1087&quot;</span>)</span><br><span class="line">                          )</span>)</span></span><br></pre></td></tr></table></figure></div></div></div><div id="outline-container-org5d94ba6" class="outline-3"><h3 id="org5d94ba6"><span class="section-number-3">1.3</span> &#x4F7F;&#x7528; spacelpa</h3><div class="outline-text-3" id="text-1-3"><p><div class="note warning">            <p>spacemacs develop 分支特性</p>          </div></p><ul class="org-ul"><li>emacs version: 26.1</li><li>spacemacs develop version: 0.300</li></ul><p><a href="https://github.com/syl20bnr/spacemacs/issues/10438" target="_blank" rel="noopener">emacs26 &#x4E0B;&#x8F7D; spacelpa &#x4F1A;&#x9047;&#x5230;&#x95EE;&#x9898; <i class="fa fa-external-link" aria-hidden="true"></i></a>, &#x63D0;&#x524D;&#x624B;&#x52A8;&#x4E0B;&#x8F7D;&#x597D; spacelpa &#x6587;&#x4EF6;&#x8DF3;&#x8FC7;&#x81EA;&#x52A8;&#x4E0B;&#x8F7D;&#x53CA;&#x89E3;&#x538B;&#x7684;&#x6B65;&#x9AA4; (<a href="https://github.com/syl20bnr/spacemacs/issues/10438#issuecomment-387449474" target="_blank" rel="noopener">refer <i class="fa fa-external-link" aria-hidden="true"></i></a>).</p><div class="org-src-container"><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mkdir ~/.emacs.d/.cache/stable-elpa/26.1cd ~/.emacs.d/.cache/stable-elpa/26.1wget https://github.com/syl20bnr/spacelpa/archive/v0.300.tar.gz -O spacelpa-0.300.tar.gztar -xzvf spacelpa-0.300.tar.gzecho -n &quot;0.300&quot; &gt; version</span><br></pre></td></tr></table></figure></div><p><code>.spacemaces</code> &#x8BBE;&#x7F6E;</p><div class="org-src-container"><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">dotspacemacs-use-spacelpa <span class="literal">t</span></span><br></pre></td></tr></table></figure></div><p><code>SPC f e R</code> &#x6216;&#x8005;&#x91CD;&#x542F; emacs</p></div></div></div><div id="outline-container-org1c1919e" class="outline-2"><h2 id="org1c1919e"><span class="section-number-2">2</span> Spacemacs &#x7F8E;&#x5316;</h2><div class="outline-text-2" id="text-2"></div><div id="outline-container-orge00c4be" class="outline-3"><h3 id="orge00c4be"><span class="section-number-3">2.1</span> &#x5B57;&#x4F53;</h3><div class="outline-text-3" id="text-2-1"><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><caption class="t-above"><span class="table-number">Table 1:</span> &#x7F16;&#x7A0B;&#x5B57;&#x4F53;, &#x7B49;&#x5BBD;&#x4E2D;&#x6587;&#x5B57;&#x4F53;&#x4EE5;&#x53CA;&#x4E0D;&#x5E38;&#x89C1;&#x6C49;&#x5B57;&#x5B57;&#x4F53;</caption><colgroup><col class="org-left"><col class="org-left"></colgroup><thead><tr><th scope="col" class="org-left">&#xA0;</th><th scope="col" class="org-left">font family name</th></tr></thead><tbody><tr><td class="org-left"><a href="https://github.com/be5invis/Iosevka/releases" target="_blank" rel="noopener">Iosevka (Source Code Pro Style) <i class="fa fa-external-link" aria-hidden="true"></i></a></td><td class="org-left">&quot;Iosevka SS09&quot;</td></tr><tr><td class="org-left"><a href="https://github.com/be5invis/Sarasa-Gothic/releases" target="_blank" rel="noopener">Sarasa Gothic (&#x66F4;&#x7EB1;&#x9ED1;&#x4F53;) <i class="fa fa-external-link" aria-hidden="true"></i></a></td><td class="org-left">&quot;&#x7B49;&#x8DDD;&#x66F4;&#x7EB1;&#x9ED1;&#x4F53; SC&quot;</td></tr><tr><td class="org-left"><a href="http://fonts.jp/hanazono/" target="_blank" rel="noopener">&#x82B1;&#x5712;&#x660E;&#x671D; <i class="fa fa-external-link" aria-hidden="true"></i></a></td><td class="org-left">&quot;HanaMinB&quot;</td></tr></tbody></table><ul class="org-ul"><li>&#x5B89;&#x88C5;&#x6240;&#x6709;&#x5B57;&#x4F53; iosevka-ss09-2.1.0.zip</li><li>&#x5B89;&#x88C5;&#x6240;&#x6709; sarasa-gothic-sc-*.ttf &#x5B57;&#x4F53;</li></ul><p>&#x914D;&#x7F6E;&#x5B57;&#x4F53;</p><div class="org-src-container"><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">dotspacemacs-default-font <span class="quoted">&apos;(<span class="string">&quot;Iosevka SS09&quot;</span></span><br><span class="line">                            <span class="keyword">:size</span> <span class="number">16</span></span><br><span class="line">                            <span class="keyword">:weight</span> normal</span><br><span class="line">                            <span class="keyword">:width</span> normal)</span></span><br></pre></td></tr></table></figure></div></div></div><div id="outline-container-org66f67cb" class="outline-3"><h3 id="org66f67cb"><span class="section-number-3">2.2</span> &#x5B57;&#x4F53;: &#x4F7F;&#x7528; cnfonts &#x914D;&#x7F6E;&#x4E2D;&#x82F1;&#x6587;&#x5BF9;&#x9F50;</h3><div class="outline-text-3" id="text-2-2"><p>&#x4F7F;&#x7528; org-table &#x65F6;&#x4E2D;&#x82F1;&#x6587;&#x6DF7;&#x6392;&#x65F6;&#x5B57;&#x4F53;&#x9700;&#x8981;&#x5BF9;&#x9F50;, &#x4F7F;&#x7528; <a href="https://github.com/tumashu/cnfonts" target="_blank" rel="noopener">cnfonts <i class="fa fa-external-link" aria-hidden="true"></i></a> &#x9879;&#x76EE;&#x89E3;&#x51B3;&#x8FD9;&#x4E00;&#x95EE;&#x9898;.</p></div><div id="outline-container-orgce95b94" class="outline-4"><h4 id="orgce95b94"><span class="section-number-4">2.2.1</span> &#x5B89;&#x88C5;</h4><div class="outline-text-4" id="text-2-2-1"><blockquote><p><code>dotspacemacs-additional-packages</code> &#x4E2D;&#x6DFB;&#x52A0; <code>cnfonts</code></p></blockquote></div></div><div id="outline-container-org8b3aa3e" class="outline-4"><h4 id="org8b3aa3e"><span class="section-number-4">2.2.2</span> &#x914D;&#x7F6E;</h4><div class="outline-text-4" id="text-2-2-2"><p><code>dotspacemacs/user-config</code> &#x4E2D;&#x6DFB;&#x52A0;</p><div class="org-src-container"><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; Chinese and English fonts alignment</span></span><br><span class="line"><span class="list">(<span class="keyword">use-package</span> cnfonts</span><br><span class="line">  <span class="keyword">:config</span></span><br><span class="line">  <span class="list">(<span class="keyword">cnfonts-enable</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">setq</span> cnfonts-use-face-font-rescale <span class="literal">t</span>)</span></span><br><span class="line">  )</span></span><br></pre></td></tr></table></figure></div><p>&#x4E0A;&#x9762;&#x7684; <code>(setq cnfonts-use-face-font-rescale t)</code> &#x7528;&#x4E8E;<a href="https://github.com/tumashu/cnfonts#cnfonts-%E4%B8%8E-org-mode-%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener">&#x8BBE;&#x7F6E;&#x4E0D;&#x540C;&#x6807;&#x9898;&#x4E2D;&#x6587;&#x5B57;&#x4F53;&#x5927;&#x5C0F;&#x4E0D;&#x540C; <i class="fa fa-external-link" aria-hidden="true"></i></a>,&#x6BD4;&#x5982; emacs &#x81EA;&#x5E26;&#x7684; lenven &#x4E3B;&#x9898;&#x5C31;&#x652F;&#x6301;&#x8FD9;&#x4E00;&#x7279;&#x6027;.</p></div></div><div id="outline-container-orgcb0a19e" class="outline-4"><h4 id="orgcb0a19e"><span class="section-number-4">2.2.3</span> &#x8BBE;&#x7F6E;&#x4E2D;&#x82F1;&#x6587;&#x5BF9;&#x9F50;</h4><div class="outline-text-4" id="text-2-2-3"><blockquote><p>M-x cnfonts-edit-profile</p></blockquote><p>&#x6267;&#x884C;&#x4E4B;&#x540E;&#x5148;&#x4E0D;&#x8981;&#x8FDB;&#x884C;&#x4EFB;&#x4F55;&#x64CD;&#x4F5C;, <code>SPC f f</code> &#x6253;&#x5F00; <code>~/.emacs.d/cnfonts/v4/profile1.el</code>&#x7F16;&#x8F91;&#x6587;&#x4EF6;, &#x5728; <code>cnfonts--custom-set-fontnames</code> &#x7684;&#x4E09;&#x884C;&#x4E2D;&#x7684;&#x7B2C;&#x4E00;&#x4F4D;&#x5206;&#x522B;&#x52A0;&#x5165;&#x5DF2;&#x7ECF;&#x5B89;&#x88C5;&#x7684;&#x5B57;&#x4F53;.</p><p>&#x793A;&#x4F8B;</p><div class="org-src-container"><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">setq</span> cnfonts--custom-set-fontnames</span><br><span class="line">      <span class="quoted">&apos;((<span class="string">&quot;Iosevka SS09&quot;</span> <span class="string">&quot;Ubuntu Mono&quot;</span> <span class="string">&quot;DejaVu Sans Mono&quot;</span>)</span><br><span class="line">        (<span class="string">&quot;&#x7B49;&#x8DDD;&#x66F4;&#x7EB1;&#x9ED1;&#x4F53; SC&quot;</span> <span class="string">&quot;Ubuntu Mono&quot;</span> <span class="string">&quot;&#x96B6;&#x4E66;&quot;</span> <span class="string">&quot;&#x65B0;&#x5B8B;&#x4F53;&quot;</span>)</span><br><span class="line">        (<span class="string">&quot;HanaMinB&quot;</span> <span class="string">&quot;SimSun-ExtB&quot;</span> <span class="string">&quot;MingLiU-ExtB&quot;</span>))</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> cnfonts--custom-set-fontsizes</span><br><span class="line">      <span class="quoted">&apos;(</span><br><span class="line">        (<span class="number">14</span>   <span class="number">14.0</span> <span class="number">14.0</span>)</span><br><span class="line">        (<span class="number">16</span>   <span class="number">16.0</span> <span class="number">16.0</span>)</span><br><span class="line">        (<span class="number">18</span>   <span class="number">18.0</span> <span class="number">18.0</span>)</span><br><span class="line">        (<span class="number">20</span>   <span class="number">20.0</span> <span class="number">20.0</span>)</span><br><span class="line">        (<span class="number">22</span>   <span class="number">22.0</span> <span class="number">22.0</span>)</span><br><span class="line">        (<span class="number">24</span>   <span class="number">24.0</span> <span class="number">24.0</span>)</span><br><span class="line">        (<span class="number">26</span>   <span class="number">26.0</span> <span class="number">26.0</span>)</span><br><span class="line">        (<span class="number">28</span>   <span class="number">28.0</span> <span class="number">28.0</span>)</span><br><span class="line">        (<span class="number">30</span>   <span class="number">30.0</span> <span class="number">30.0</span>)</span><br><span class="line">        (<span class="number">32</span>   <span class="number">32.0</span> <span class="number">32.0</span>)</span><br><span class="line">        )</span>)</span></span><br></pre></td></tr></table></figure></div><p>&#x518D;&#x6B21;&#x6267;&#x884C; <code>M-x cnfonts-edit-profile</code>, &#x6309;&#x7167;&#x6559;&#x7A0B;&#x8BBE;&#x7F6E;&#x4E2D;&#x82F1;&#x6587;&#x5BF9;&#x9F50;.</p><p>&#x91CD;&#x542F; emacs &#x540E;&#x5982;&#x679C;&#x53D1;&#x73B0;&#x5B57;&#x4F53;&#x5927;&#x5C0F;&#x5728;&#x8F7D;&#x5165; cnfonts &#x4E4B;&#x540E;&#x6709;&#x6539;&#x53D8;, &#x5E94;&#x8BE5;&#x662F; profile &#x8F7D;&#x5165;&#x8BBE;&#x7F6E;&#x7684;&#x95EE;&#x9898;. &#x68C0;&#x67E5; <code>~/.emacs.d/cnfonts/cnfonts.conf</code></p><div class="org-src-container"><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">nil</span>)</span><span class="list">(<span class="list">(<span class="string">&quot;profile1&quot;</span> . <span class="number">2</span>)</span>)</span></span><br></pre></td></tr></table></figure></div><p>&#x8BBE;&#x7F6E;&#x597D;&#x6700;&#x540E;&#x7684;&#x6570;&#x5B57;, index &#x4ECE; 1 &#x5F00;&#x59CB;. &#x4F7F;&#x9ED8;&#x8BA4;&#x5B57;&#x4F53;&#x5927;&#x5C0F;&#x4E0E; <code>cnfonts--custom-set-fontsizes</code> &#x4E2D;&#x9009;&#x62E9;&#x7684;&#x914D;&#x7F6E;&#x76F8;&#x540C;.&#x5982;&#x679C; <code>dotspacemacs-default-font :size</code> &#x4E3A; 14, &#x5728;&#x8FD9;&#x91CC;&#x7684;&#x5E94;&#x8BE5;&#x8BBE;&#x7F6E;&#x4E3A; <code>1</code>.</p></div></div></div><div id="outline-container-orga84f99f" class="outline-3"><h3 id="orga84f99f"><span class="section-number-3">2.3</span> <span class="todo label warning TODO">TODO</span> &#x4E3B;&#x9898;: doom-themes</h3></div><div id="outline-container-orgbe1fd21" class="outline-3"><h3 id="orgbe1fd21"><span class="section-number-3">2.4</span> <span class="todo label warning TODO">TODO</span> solaire-mode:</h3></div><div id="outline-container-orgf5ba627" class="outline-3"><h3 id="orgf5ba627"><span class="section-number-3">2.5</span> mode line &#x663E;&#x793A;&#x65F6;&#x95F4;</h3><div class="outline-text-3" id="text-2-5"><p>&#x5728; MacOS &#x5168;&#x5C4F;&#x663E;&#x793A;&#x4E0B;&#x53EF;&#x4EE5;&#x65B9;&#x4FBF;&#x5730;&#x67E5;&#x770B;&#x5F53;&#x524D;&#x65F6;&#x95F4;</p><div class="org-src-container"><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">display-time-mode</span> <span class="literal">t</span>)</span></span><br></pre></td></tr></table></figure></div></div></div></div><div id="outline-container-orgf0ca6f0" class="outline-2"><h2 id="orgf0ca6f0"><span class="section-number-2">3</span> Spacemacs &#x4F7F;&#x7528;&#x6280;&#x5DE7;</h2><div class="outline-text-2" id="text-3"></div><div id="outline-container-orgd8eb0b3" class="outline-3"><h3 id="orgd8eb0b3"><span class="section-number-3">3.1</span> &#x5BFC;&#x822A;: &#x4F7F;&#x7528; avy</h3><div class="outline-text-3" id="text-3-1"><p><a href="https://github.com/abo-abo/avy" target="_blank" rel="noopener">avy Github <i class="fa fa-external-link" aria-hidden="true"></i></a></p><p>&#x4E0D;&#x8981;&#x518D;&#x4F7F;&#x7528;&#x91CD;&#x590D;&#x6309; <code>C-n</code> <code>C-p</code> &#x5728;&#x5F53;&#x524D;&#x6587;&#x4EF6;&#x5728;&#x79FB;&#x52A8;&#x5149;&#x6807;&#x5230;&#x76EE;&#x6807;&#x4F4D;&#x7F6E;&#x4E86;. &#x4F7F;&#x7528;evil-avy-goto-char. &#x9996;&#x5148;&#x773C;&#x775B;&#x770B;&#x51C6;&#x76EE;&#x6807;&#x4F4D;&#x7F6E;, &#x7136;&#x540E;&#x6309;&#x4E0B; <code>SPC j j</code>. &#x8DDF;&#x7740;&#x63D0;&#x793A;&#x7684;&#x5B57;&#x7B26;&#x6309;&#x4E0B;&#x6309;&#x952E;&#x76F4;&#x63A5;&#x8DF3;&#x8F6C;&#x5230;&#x76EE;&#x6807;&#x4F4D;&#x7F6E;.</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><caption class="t-above"><span class="table-number">Table 2:</span> avy &#x6309;&#x952E;&#x7ED1;&#x5B9A;</caption><colgroup><col class="org-left"><col class="org-left"><col class="org-left"></colgroup><thead><tr><th scope="col" class="org-left">&#x547D;&#x4EE4;</th><th scope="col" class="org-left">spacemacs &#x6309;&#x952E;&#x7ED1;&#x5B9A;</th><th scope="col" class="org-left">&#x529F;&#x80FD;</th></tr></thead><tbody><tr><td class="org-left">avy-goto-char</td><td class="org-left">SPC j j</td><td class="org-left">&#x8DF3;&#x8F6C;&#x5230;&#x5B57;&#x7B26;</td></tr><tr><td class="org-left">avy-goto-word</td><td class="org-left">SPC j w</td><td class="org-left">&#x8DF3;&#x8F6C;&#x5230;&#x5355;&#x8BCD;</td></tr><tr><td class="org-left">avy-goto-line</td><td class="org-left">SPC j l</td><td class="org-left">&#x8DF3;&#x8F6C;&#x5230;&#x884C;</td></tr></tbody></table><p>avy-goto-char &#x793A;&#x4F8B;</p><p><img src="/2019/02/06/productivity/avy-goto-char.png"></p></div></div><div id="outline-container-org5cf8072" class="outline-3"><h3 id="org5cf8072"><span class="section-number-3">3.2</span> &#x641C;&#x7D22;: &#x4F7F;&#x7528; helm-swoop</h3><div class="outline-text-3" id="text-3-2"><p><a href="https://github.com/ShingoFukuyama/helm-swoop" target="_blank" rel="noopener">helm-swoop Github <i class="fa fa-external-link" aria-hidden="true"></i></a></p><p>&#x4E0D;&#x518D;&#x91CD;&#x590D;&#x5730;&#x6309; <code>C-s</code> &#x5728;&#x5F53;&#x524D;&#x6587;&#x4EF6;&#x4E2D;&#x8FDB;&#x884C;&#x641C;&#x7D22;, <code>C-s</code> &#x53EA;&#x9002;&#x5408;&#x7B80;&#x5355;&#x7684;&#x641C;&#x7D22;&#x573A;&#x666F;. &#x4F7F;&#x7528; helm-swoop &#x8FDB;&#x884C;&#x9884;&#x89C8;&#x5F0F;&#x641C;&#x7D22;.</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><caption class="t-above"><span class="table-number">Table 3:</span> helm-swoop &#x6309;&#x952E;&#x7ED1;&#x5B9A;</caption><colgroup><col class="org-left"><col class="org-left"></colgroup><thead><tr><th scope="col" class="org-left">Key binding</th><th scope="col" class="org-left">Description</th></tr></thead><tbody><tr><td class="org-left">SPC s s</td><td class="org-left">execute helm-swoop</td></tr><tr><td class="org-left">SPC s S</td><td class="org-left">execute helm-multi-swoop</td></tr><tr><td class="org-left">SPC s C-s</td><td class="org-left">execute helm-multi-swoop-all</td></tr></tbody></table><p>&#x793A;&#x4F8B;</p><p><img src="/2019/02/06/productivity/helm-swoop.gif"></p></div></div><div id="outline-container-orgc291c91" class="outline-3"><h3 id="orgc291c91"><span class="section-number-3">3.3</span> &#x641C;&#x7D22;: &#x4F7F;&#x7528;&#x5916;&#x90E8;&#x5DE5;&#x5177;&#x641C;&#x7D22;&#x6587;&#x4EF6;</h3><div class="outline-text-3" id="text-3-3"><p><div class="note warning">            <p>spacemacs develop 分支特性: rg (ripgrep) 支持</p>          </div></p><p>&#x4EC5;&#x4EC5;&#x641C;&#x7D22;&#x5F53;&#x524D; buffer &#x5185;&#x5BB9;&#x662F;&#x4E0D;&#x591F;&#x7684;, spacemacs &#x53EF;&#x4EE5;&#x4F7F;&#x7528;</p><ul class="org-ul"><li><a href="https://github.com/BurntSushi/ripgrep" target="_blank" rel="noopener">rg (ripgrep) <i class="fa fa-external-link" aria-hidden="true"></i></a></li><li><a href="https://github.com/ggreer/the_silver_searcher" target="_blank" rel="noopener">ag (the silver searcher) <i class="fa fa-external-link" aria-hidden="true"></i></a></li><li><a href="https://github.com/monochromegane/the_platinum_searcher" target="_blank" rel="noopener">pt (the platinum searcher) <i class="fa fa-external-link" aria-hidden="true"></i></a></li><li><a href="https://beyondgrep.com/" target="_blank" rel="noopener">ack <i class="fa fa-external-link" aria-hidden="true"></i></a></li></ul><p>&#x7B49;&#x5DE5;&#x5177;&#x8FDB;&#x884C;&#x6587;&#x4EF6;&#x641C;&#x7D22;. &#x5982;&#x679C;&#x4EE5;&#x4E0A;&#x7684;&#x5DE5;&#x5177;&#x90FD;&#x627E;&#x4E0D;&#x5230;, spacemacs &#x5C31;&#x4F1A;&#x8C03;&#x7528; <code>grep</code>.</p><blockquote><p>dotspacemacs-search-tools, the default order is rg, ag, pt, ack then grep</p></blockquote><p>spacemacs &#x4F1A;&#x6309;&#x7167;&#x7CFB;&#x7EDF;&#x8DEF;&#x5F84;&#x4E2D;&#x627E;&#x5230;&#x4EE5;&#x4E0A;&#x5DE5;&#x5177;&#x7684;&#x987A;&#x5E8F;, &#x4F7F;&#x7528;&#x7EDF;&#x4E00;&#x7684;&#x754C;&#x9762;&#x8FDB;&#x884C;&#x8C03;&#x7528;.</p><p>&#x63A8;&#x8350; Linux/MacOS &#x4F7F;&#x7528; <code>ripgrep</code> (super bleeding fast!), windows &#x7528;&#x6237;&#x4F7F;&#x7528; <code>pt</code>.</p><p>&#x66F4;&#x591A;&#x4F7F;&#x7528;&#x8BF7;&#x67E5;&#x770B;<a href="http://develop.spacemacs.org/doc/DOCUMENTATION.html#searching" target="_blank" rel="noopener"> searching <i class="fa fa-external-link" aria-hidden="true"></i></a></p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><caption class="t-above"><span class="table-number">Table 4:</span> helm search &#x6309;&#x952E;&#x7ED1;&#x5B9A;</caption><colgroup><col class="org-left"><col class="org-left"></colgroup><thead><tr><th scope="col" class="org-left">&#x6309;&#x952E;&#x7ED1;&#x5B9A;</th><th scope="col" class="org-left">&#x529F;&#x80FD;</th></tr></thead><tbody><tr><td class="org-left"><code>SPC /</code> or <code>SPC s p</code></td><td class="org-left">search project</td></tr><tr><td class="org-left"><code>SPC /</code> or <code>SPC s d</code></td><td class="org-left">search current directory</td></tr><tr><td class="org-left"><code>SPC s f</code></td><td class="org-left">search in arbitrary directory</td></tr></tbody></table></div></div></div><div id="outline-container-orge306e53" class="outline-2"><h2 id="orge306e53"><span class="section-number-2">4</span> org-mode &#x4F7F;&#x7528;&#x6280;&#x5DE7;</h2><div class="outline-text-2" id="text-4"></div><div id="outline-container-org7ac687d" class="outline-3"><h3 id="org7ac687d"><span class="section-number-3">4.1</span> org-mode &#x914D;&#x7F6E;&#x91CD;&#x8981;&#x63D0;&#x793A;</h3><div class="outline-text-3" id="text-4-1"><p>spacemacs &#x4F7F;&#x7528; <code>org</code> ELPA &#x4ED3;&#x5E93;&#x4E2D;&#x7684;&#x7248;&#x672C;, &#x800C;&#x4E0D;&#x662F; emacs &#x81EA;&#x5E26;&#x7684; org.</p><p><a href="http://develop.spacemacs.org/layers/+emacs/org/README.html#important-note" target="_blank" rel="noopener">&#x6240;&#x6709;&#x4E0E; org-mode &#x76F8;&#x5173;&#x7684;&#x914D;&#x7F6E;&#x90FD;&#x9700;&#x8981;&#x653E;&#x5728; with-eval-after-load &#x4EE3;&#x7801;&#x5757;&#x4E2D; <i class="fa fa-external-link" aria-hidden="true"></i></a>, &#x5426;&#x5219;&#x4F1A;&#x8F7D;&#x5165; emacs &#x81EA;&#x5E26;&#x7684; org &#x7248;&#x672C;, &#x9020;&#x6210;&#x7248;&#x672C;&#x51B2;&#x7A81;&#x4ECE;&#x800C;&#x5F15;&#x8D77;&#x5404;&#x79CD;&#x5947;&#x602A;&#x7684; org-mode &#x76F8;&#x5173;&#x7684;&#x62A5;&#x9519;.</p><div class="org-src-container"><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">with-eval-after-load</span> <span class="quoted">&apos;org</span></span><br><span class="line">  <span class="comment">;; here goes your Org config :)</span></span><br><span class="line">  <span class="comment">;; ....</span></span><br><span class="line">  )</span></span><br></pre></td></tr></table></figure></div></div></div><div id="outline-container-org05b6632" class="outline-3"><h3 id="org05b6632"><span class="section-number-3">4.2</span> &#x4E2D;&#x82F1;&#x6587;&#x4E4B;&#x95F4;&#x81EA;&#x52A8;&#x63D2;&#x5165;&#x7A7A;&#x683C;</h3><div class="outline-text-3" id="text-4-2"><p><a href="https://github.com/coldnew/pangu-spacing" target="_blank" rel="noopener">pangu-spacing Github <i class="fa fa-external-link" aria-hidden="true"></i></a></p><p>&#x5728; <code>dotspacemacs-additional-packages</code> &#x4E2D;&#x52A0;&#x5165; pangu-spacing, <code>SPC f e R</code> &#x81EA;&#x52A8;&#x4E0B;&#x8F7D;&#x5B89;&#x88C5;.</p><p><code>dotspacemacs/user-config</code> &#x4E2D;&#x52A0;&#x5165;&#x914D;&#x7F6E;</p><div class="org-src-container"><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">use-package</span> pangu-spacing</span><br><span class="line">  <span class="keyword">:config</span></span><br><span class="line">  <span class="list">(<span class="keyword">global-pangu-spacing-mode</span> <span class="number">1</span>)</span></span><br><span class="line">  <span class="comment">;; only insert real whitespace in some specific mode, but just add virtual space in other mode</span></span><br><span class="line">  <span class="list">(<span class="keyword">add-hook</span> <span class="quoted">&apos;org-mode-hook</span></span><br><span class="line">            <span class="quoted">&apos;(lambda ()</span><br><span class="line">               (set (make-local-variable &apos;pangu-spacing-real-insert-separtor) <span class="literal">t</span>))</span>)</span></span><br><span class="line">  )</span></span><br></pre></td></tr></table></figure></div></div></div><div id="outline-container-orgb8e35e9" class="outline-3"><h3 id="orgb8e35e9"><span class="section-number-3">4.3</span> &#x8FD0;&#x884C; shell &#x547D;&#x4EE4;, &#x4E0D;&#x9700;&#x8981;&#x79BB;&#x5F00; emacs</h3><div class="outline-text-3" id="text-4-3"><p>&#x6709;&#x65F6;&#x5728;&#x5199;&#x6587;&#x6863;&#x65F6;&#x9700;&#x8981;&#x67E5;&#x770B;&#x67D0;&#x4E9B; shell &#x547D;&#x4EE4;&#x7684;&#x8FD0;&#x884C;&#x7ED3;&#x679C;, &#x8FD0;&#x884C;&#x7B80;&#x5355;&#x7684;&#x5355;&#x4E2A;&#x547D;&#x4EE4;&#x5E76;&#x4E0D;&#x9700;&#x8981;&#x79BB;&#x5F00;emacs, &#x53EF;&#x4EE5;&#x5728;&#x5199;&#x6587;&#x6863;&#x65F6;&#x5E26;&#x6765;&#x66F4;&#x597D;&#x7684;&#x4F53;&#x9A8C;.</p><p>&#x6BD4;&#x5982;&#x5728;&#x5199; markdown &#x6587;&#x6863;&#x65F6;, &#x4F7F;&#x7528;<a href="https://github.com/yoshuawuyts/vmd" target="_blank" rel="noopener"> vmd <i class="fa fa-external-link" aria-hidden="true"></i></a> &#x9884;&#x89C8;&#x6548;&#x679C;, &#x53EA;&#x9700;&#x8981; <code>M-! vmd README.md</code> &#x5373;&#x53EF;.</p><p><code>M-x shell-command</code> &#x53EF;&#x4EE5;&#x8FD0;&#x884C; shell &#x547D;&#x4EE4;&#x5E76;&#x5728; minibuffer &#x4E2D;&#x663E;&#x793A;&#x547D;&#x4EE4;&#x8F93;&#x51FA;.</p><p><code>M-x shell-command-on-region</code> &#x53EF;&#x4EE5;&#x5C06;&#x5F53;&#x524D;&#x9009;&#x4E2D;&#x5185;&#x5BB9;&#x4F5C;&#x4E3A;&#x8F93;&#x5165;&#x8FD0;&#x884C;&#x5916;&#x90E8; shell &#x547D;&#x4EE4;, &#x5728;minibuffer &#x4E2D;&#x663E;&#x793A;&#x547D;&#x4EE4;&#x8F93;&#x51FA;. &#x8FD0;&#x884C;&#x524D;&#x52A0;&#x4E0A; <code>C-u</code> &#x53EF;&#x4EE5;&#x9009;&#x62E9;&#x5C06;&#x547D;&#x4EE4;&#x8F93;&#x51FA;&#x66FF;&#x6362;&#x5F53;&#x524D;&#x9009;&#x4E2D;&#x5185;&#x5BB9;.</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><caption class="t-above"><span class="table-number">Table 5:</span> Running Shell Commands from Emacs</caption><colgroup><col class="org-left"><col class="org-left"></colgroup><thead><tr><th scope="col" class="org-left">&#x6309;&#x952E;&#x7ED1;&#x5B9A;</th><th scope="col" class="org-left">&#x547D;&#x4EE4;</th></tr></thead><tbody><tr><td class="org-left">M-<code>!</code></td><td class="org-left">shell-command</td></tr><tr><td class="org-left">M-|</td><td class="org-left">shell-command-on-region</td></tr><tr><td class="org-left">C-u M-|</td><td class="org-left">shell-command-on-region, replace region with  output</td></tr></tbody></table></div></div><div id="outline-container-orgdd20ed2" class="outline-3"><h3 id="orgdd20ed2"><span class="section-number-3">4.4</span> &#x5173;&#x95ED;&#x56FE;&#x7247;&#x663E;&#x793A;</h3><div class="outline-text-3" id="text-4-4"><p>&#x5728; org &#x6587;&#x6863;&#x63D2;&#x5165;&#x56FE;&#x7247;&#x540E; emacs &#x4F1A;&#x9ED8;&#x8BA4;&#x6E32;&#x67D3;&#x56FE;&#x7247;. &#x5728;&#x786E;&#x8BA4;&#x63D2;&#x5165;&#x56FE;&#x7247;&#x6210;&#x529F;&#x540E;, &#x7F16;&#x8F91;&#x6587;&#x672C;&#x65F6;&#x56FE;&#x7247;&#x4F1A;&#x5360;&#x7528;&#x5927;&#x91CF;&#x7A7A;&#x95F4;. &#x6211;&#x4EEC;&#x901A;&#x5E38;&#x5728;&#x7F16;&#x8F91;&#x65F6;&#x4F1A;&#x60F3;&#x5173;&#x95ED;&#x56FE;&#x7247;&#x663E;&#x793A;.</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><caption class="t-above"><span class="table-number">Table 6:</span> &#x5207;&#x6362;&#x56FE;&#x7247;&#x663E;&#x793A;</caption><colgroup><col class="org-left"><col class="org-left"></colgroup><tbody><tr><td class="org-left"><code>M-x org-toggle-inline-images</code></td><td class="org-left"><code>C-c C-x C-v</code></td></tr></tbody></table></div></div><div id="outline-container-orgdff2b9e" class="outline-3"><h3 id="orgdff2b9e"><span class="section-number-3">4.5</span> &#x8F6C;&#x4E49;</h3><div class="outline-text-3" id="text-4-5"><p>&#x5728;&#x9700;&#x8981;&#x8F6C;&#x4E49;&#x5B57;&#x7B26;&#x65F6;, &#x8BB0;&#x4F4F;&#x88AB;&#x5305;&#x56F4;&#x5728; <code>*</code> <code>/</code> <code>_</code> <code>=</code> <code>+</code> &#x4E4B;&#x95F4;&#x7684;&#x5185;&#x5BB9;&#x7279;&#x6B8A;&#x5B57;&#x7B26;&#x5927;&#x90E8;&#x5206;&#x90FD;&#x4E0D;&#x4F1A;&#x88AB;&#x89E3;&#x6790;.</p></div><div id="outline-container-orgee8c10c" class="outline-4"><h4 id="orgee8c10c"><span class="section-number-4">4.5.1</span> #+BEGIN_SRC &#x8F6C;&#x4E49;</h4><div class="outline-text-4" id="text-4-5-1"><p><code>#+BEGIN_SRC</code> org &#x6587;&#x6863;&#x4F1A;&#x7279;&#x6B8A;&#x89E3;&#x6790;, &#x6709;&#x65F6;&#x5019;&#x4EE3;&#x7801;&#x4F8B;&#x5B50;&#x4E2D;&#x9700;&#x8981;&#x539F;&#x6837;&#x8F93;&#x51FA;&#x65F6;, &#x4F7F;&#x7528; <code>,#</code> &#x8FDB;&#x884C;&#x8F6C;&#x4E49;.</p><pre class="example">#+begin_src,#+begin_src,#+end_src#+end_src</pre></div></div><div id="outline-container-orgbf3086b" class="outline-4"><h4 id="orgbf3086b"><span class="section-number-4">4.5.2</span> org-table &#x4E2D;&#x8F6C;&#x4E49; <code>|</code> &#x5B57;&#x7B26;</h4><div class="outline-text-4" id="text-4-5-2"><p>&#x9700;&#x8981;&#x5728; or-table &#x4E2D;&#x8F93;&#x51FA; <code>|</code> &#x5B57;&#x7B26;&#x65F6;&#x4F7F;&#x7528;</p><blockquote><p><code>\vert{}</code></p></blockquote><p>&#x8FDB;&#x884C;&#x8F6C;&#x4E49;.</p></div></div></div></div></div><div id="postamble" class="status"><p style="font-size: .7em; font-style: italic">Generated using <a href="https://www.gnu.org/software/emacs/" target="_blank" rel="noopener">Emacs</a> 26.1 (<a href="https://orgmode.org" target="_blank" rel="noopener">Org</a> mode 9.1.14)</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;content&quot;&gt;
&lt;div class=&quot;tabs&quot; id=&quot;org-toc&quot; style=&quot;font-size: 12px;&quot;&gt;
&lt;ul class=&quot;nav-tabs&quot;&gt;
&lt;li class=&quot;tab&quot;&gt;
&lt;a class=&quot;btn&quot; href=&quot;#tab
      
    
    </summary>
    
    
      <category term="Emacs" scheme="http://mpwang.github.io/tags/Emacs/"/>
    
      <category term="生产力" scheme="http://mpwang.github.io/tags/%E7%94%9F%E4%BA%A7%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>更换 ox-reveal 为 org-re-reveal</title>
    <link href="http://mpwang.github.io/2019/02/04/swith-to-org-re-reveal/"/>
    <id>http://mpwang.github.io/2019/02/04/swith-to-org-re-reveal/</id>
    <published>2019-02-04T05:43:52.000Z</published>
    <updated>2019-02-09T19:24:55.749Z</updated>
    
    <content type="html"><![CDATA[<div id="content"><div class="tabs" id="org-toc" style="font-size: 12px;"><ul class="nav-tabs"><li class="tab"><a class="btn" href="#tab-org6f02dc3">1. &#x95EE;&#x9898;</a></li><li class="tab"><a class="btn" href="#tab-org00df2a4">2. &#x89E3;&#x51B3;&#x65B9;&#x6CD5;</a></li></ul><div class="tab-content"><div class="tab-pane" id="tab-org6f02dc3"><ul><a href="#org6f02dc3">1. &#x95EE;&#x9898;</a></ul></div><div class="tab-pane" id="tab-org00df2a4"><ul><a href="#org00df2a4">2. &#x89E3;&#x51B3;&#x65B9;&#x6CD5;</a><li><a href="#org6c6a2e4">2.1. spacemacs &#x7528;&#x6237;</a></li></ul></div></div></div><div id="outline-container-org6f02dc3" class="outline-2"><h2 id="org6f02dc3"><span class="section-number-2">1</span> &#x95EE;&#x9898;</h2><div class="outline-text-2" id="text-1"><p>&#x4F7F;&#x7528; Spacemacs &#x66F4;&#x65B0;&#x4F9D;&#x8D56;&#x5305;&#x4E4B;&#x540E;, org-mode &#x66F4;&#x65B0;&#x81F3; 9.2 &#x7248;&#x672C;.<b><b>org-structure-template-alist</b></b> &#x7684;&#x7ED3;&#x6784;&#x5B9A;&#x4E49;&#x53D1;&#x751F;&#x4E86;&#x53D8;&#x5316;, <b><b>ox-reveal</b></b> &#x7684;&#x6E90;&#x7801;&#x4E0E;Org 9.2 &#x4E0D;&#x517C;&#x5BB9;.</p><p>&#x6253;&#x5F00; org &#x6587;&#x4EF6;&#x51FA;&#x73B0;&#x4EE5;&#x4E0B;&#x7684;&#x9519;&#x8BEF;:</p><blockquote><p>In Org 9.2 the format was changed from something like</p><p>(&quot;s&quot; &quot;#+BEGIN_SRC ?\n#+END_SRC&quot;)to something like</p><p>(&quot;s&quot; . &quot;src&quot;)</p></blockquote><p><a href="https://github.com/yjwen/org-reveal/issues/363" target="_blank" rel="noopener">ox-reveal Original issue <i class="fa fa-external-link" aria-hidden="true"></i></a></p></div></div><div id="outline-container-org00df2a4" class="outline-2"><h2 id="org00df2a4"><span class="section-number-2">2</span> &#x89E3;&#x51B3;&#x65B9;&#x6CD5;</h2><div class="outline-text-2" id="text-2"><p>ox-reveal &#x9879;&#x76EE;&#x5DF2;&#x7ECF;&#x5F88;&#x4E45;&#x6CA1;&#x6709;&#x66F4;&#x65B0;&#x4E86;, &#x770B;&#x8D77;&#x6765;&#x5E94;&#x8BE5;&#x6CA1;&#x6709;&#x518D;&#x7EF4;&#x62A4;&#x4E86;.</p><div class="org-src-container"><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; Register auto-completion for speaker notes.</span></span><br><span class="line"><span class="list">(<span class="keyword">when</span> org-reveal-note-key-char</span><br><span class="line">  <span class="list">(<span class="keyword">add-to-list</span> <span class="quoted">&apos;org-structure-template-alist</span></span><br><span class="line">               <span class="list">(<span class="keyword">list</span> org-reveal-note-key-char <span class="string">&quot;#+BEGIN_NOTES\n\?\n#+END_NOTES&quot;</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; needs to be updated as</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; Register auto-completion for speaker notes.</span></span><br><span class="line"><span class="list">(<span class="keyword">when</span> org-reveal-note-key-char</span><br><span class="line">  <span class="list">(<span class="keyword">add-to-list</span> <span class="quoted">&apos;org-structure-template-alist</span></span><br><span class="line">               <span class="list">(<span class="keyword">cons</span> org-reveal-note-key-char <span class="string">&quot;NOTES&quot;</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure></div><p>&#x76F4;&#x63A5;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6CD5;&#x66F4;&#x6362; ox-reveal &#x4E3A; <a href="https://gitlab.com/oer/org-re-reveal" target="_blank" rel="noopener">org-re-reveal <i class="fa fa-external-link" aria-hidden="true"></i></a></p></div><div id="outline-container-org6c6a2e4" class="outline-3"><h3 id="org6c6a2e4"><span class="section-number-3">2.1</span> spacemacs &#x7528;&#x6237;</h3><div class="outline-text-3" id="text-2-1"><p>&#x5C06; org-re-reveal &#x6DFB;&#x52A0;&#x5230; <b><b>dotspacemacs-additional-packages</b></b></p><p>&#x5728; <b><b>dotspacemacs/user-config</b></b> &#x4E2D;&#x6DFB;&#x52A0;</p><div class="org-src-container"><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">with-eval-after-load</span> <span class="quoted">&apos;org</span></span><br><span class="line">  <span class="list">(<span class="keyword">require</span> <span class="quoted">&apos;org-re-reveal</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">setq</span> org-re-reveal-root <span class="string">&quot;file://path-to-reveal.js&quot;</span>)</span></span><br><span class="line">  )</span></span><br></pre></td></tr></table></figure></div></div></div></div></div><div id="postamble" class="status"><p style="font-size: .7em; font-style: italic">Generated using <a href="https://www.gnu.org/software/emacs/" target="_blank" rel="noopener">Emacs</a> 26.1 (<a href="https://orgmode.org" target="_blank" rel="noopener">Org</a> mode 9.1.14)</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;content&quot;&gt;
&lt;div class=&quot;tabs&quot; id=&quot;org-toc&quot; style=&quot;font-size: 12px;&quot;&gt;
&lt;ul class=&quot;nav-tabs&quot;&gt;
&lt;li class=&quot;tab&quot;&gt;
&lt;a class=&quot;btn&quot; href=&quot;#tab
      
    
    </summary>
    
    
      <category term="Emacs" scheme="http://mpwang.github.io/tags/Emacs/"/>
    
      <category term="Org-mode" scheme="http://mpwang.github.io/tags/Org-mode/"/>
    
  </entry>
  
  <entry>
    <title>How to easily replace host:port of a url in Python</title>
    <link href="http://mpwang.github.io/2018/12/31/python-replace-url-host/"/>
    <id>http://mpwang.github.io/2018/12/31/python-replace-url-host/</id>
    <published>2018-12-30T16:16:13.000Z</published>
    <updated>2019-02-08T17:32:14.173Z</updated>
    
    <content type="html"><![CDATA[<p>for python3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://example.com/about"</span></span><br><span class="line">parsed = urlparse(a)</span><br><span class="line">parsed = parsed._replace(netloc=<span class="string">"localhost:8000"</span>).geturl()</span><br><span class="line">print(parsed)</span><br><span class="line"><span class="comment"># 'http://localhost:8000/about'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;for python3&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/
      
    
    </summary>
    
    
      <category term="Python" scheme="http://mpwang.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>SQLAlchemy 使用自定义 Query 类</title>
    <link href="http://mpwang.github.io/2018/05/26/sqlalchemy-custom-query/"/>
    <id>http://mpwang.github.io/2018/05/26/sqlalchemy-custom-query/</id>
    <published>2018-05-26T09:53:33.000Z</published>
    <updated>2018-05-26T10:51:09.452Z</updated>
    
    <content type="html"><![CDATA[<h1>Session.query_property</h1><p>在 SQLAlchemy 中可以使用 session 的方法<code>query_property</code>方便的使用自定义的 query 类 <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>.</p><p>以下是官方的示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Session = scoped_session(sessionmaker())</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    query = Session.query_property()</span><br><span class="line"></span><br><span class="line"><span class="comment"># after mappers are defined</span></span><br><span class="line">result = MyClass.query.filter(MyClass.name==<span class="string">'foo'</span>).all()</span><br></pre></td></tr></table></figure><p><code>query_property</code>接收一个参数<code>cls</code>, 指定自定义的Query class (用户从<code>sqlalchemy.orm.Query</code>继承的子类), 而不是默认的Query.</p><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> Query</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClassQuery</span><span class="params">(Query)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    query = Session.query_property(cls=MyClassQuery)</span><br><span class="line"></span><br><span class="line"><span class="comment"># after mappers are defined</span></span><br><span class="line"><span class="keyword">assert</span> isinstance(MyClass.query, MyClassQuery)</span><br></pre></td></tr></table></figure><p>以上的方法可以完成一些基本的需求, 但是问题是<code>MyClass.query</code>的类定义时和Session耦合在一起了.</p><p>假如我想使用自定义的Query类, 使用query构造出查询条件后,需要应用到不同的session上(也许几个session代表不同的数据库连接), 这就要求<code>My Class.query</code>在定义时需要与Session解耦, 最后使用<code>query.with_session</code>方法将query绑定到session上应用查询.</p><h1>自定义Query类, 与Session解耦</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例子使用了__init_subclass__方法, 要求python3.6+. 3.6之前的版本需要进行相应的修改.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> (</span><br><span class="line">    Column,</span><br><span class="line">    String,</span><br><span class="line">    Integer,</span><br><span class="line">    and_,</span><br><span class="line">    orm,</span><br><span class="line">    create_engine</span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> scoped_session, sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm.base <span class="keyword">import</span> class_mapper, exc <span class="keyword">as</span> orm_exc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseQuery</span><span class="params">(orm.Query)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, with_default=False, **kwargs)</span>:</span></span><br><span class="line">        model_cls = self._mapper_zero().class_</span><br><span class="line">        <span class="keyword">if</span> with_default:</span><br><span class="line">            filters = model_cls._default_filters()</span><br><span class="line">            <span class="keyword">if</span> filters <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                self = self.enable_assertions(<span class="keyword">False</span>).filter(filters)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserQuery</span><span class="params">(BaseQuery)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueryPropertyMixin</span>:</span></span><br><span class="line">    query_cls = BaseQuery</span><br><span class="line">    query: BaseQuery = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_default_filters</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_query_property</span><span class="params">(query_cls)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">query</span><span class="params">(object)</span>:</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    mapper = class_mapper(owner)</span><br><span class="line">                    <span class="keyword">if</span> mapper:</span><br><span class="line">                        <span class="comment"># custom query class</span></span><br><span class="line">                        <span class="keyword">return</span> query_cls(mapper)</span><br><span class="line">                <span class="keyword">except</span> orm_exc.UnmappedClassError:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> query()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init_subclass__</span><span class="params">(cls, **kwargs)</span>:</span></span><br><span class="line">        cls.query = QueryPropertyMixin._query_property(cls.query_cls)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base, QueryPropertyMixin)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'users'</span></span><br><span class="line"></span><br><span class="line">    query_cls = UserQuery</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_default_filters</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> and_(</span><br><span class="line">            cls.name != <span class="keyword">None</span>,</span><br><span class="line">            cls.fullname != <span class="keyword">None</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name = Column(String)</span><br><span class="line">    fullname = Column(String)</span><br><span class="line">    password = Column(String)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">'sqlite:///:memory:'</span>, echo=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">Session = scoped_session(sessionmaker(bind=engine))</span><br><span class="line"></span><br><span class="line">session = Session()</span><br><span class="line">Base.metadata.create_all(engine)</span><br><span class="line"></span><br><span class="line">session.add(User(id=<span class="number">1</span>, name=<span class="string">'name'</span>, fullname=<span class="string">'fullname'</span>))</span><br><span class="line">session.commit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> isinstance(User.query, UserQuery)</span><br><span class="line"></span><br><span class="line">record = User.query.filter_by(id=<span class="number">1</span>).with_session(session).one()</span><br><span class="line"><span class="keyword">assert</span> record.id == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">query_str = User.query(with_default=<span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">assert</span> str(query_str).find(<span class="string">'User.name IS NOT NULL'</span>)</span><br></pre></td></tr></table></figure><p>首先定义自己的Query继承关系, BaseQuery继承<code>orm.Query</code>, 每个model如果需要有自己的特定查询类则继承BaseQuery. 在User中使用<code>query_cls</code>指定特定的查询类, 不定义则使用默认的BaseQuery.</p><p>核心点在于User模型继承了<code>QueryPropertyMixin</code>, 在<code>QueryPropertyMixin</code>使用了<code>__init_subclass__</code>方法控制子类在初始化时生成<code>query</code>对象.这样<code>User.query</code>对象就与session解耦, 在之后就使用<code>with_session</code>与具体session绑定进行查询了.</p><p>例子中还演示了如何在model类定义中一个default_filters, 代表某些情况中需要使用的filters, 方便查询特定条件的对象.</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="http://docs.sqlalchemy.org/en/latest/orm/contextual.html#sqlalchemy.orm.scoping.scoped_session.query_property" target="_blank" rel="noopener">SQLAlchemy session query_property</a> <a href="#fnref1" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;Session.query_property&lt;/h1&gt;
&lt;p&gt;在 SQLAlchemy 中可以使用 session 的方法&lt;code&gt;query_property&lt;/code&gt;方便的使用自定义的 query 类 &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="Python" scheme="http://mpwang.github.io/tags/Python/"/>
    
      <category term="SQLAlchemy" scheme="http://mpwang.github.io/tags/SQLAlchemy/"/>
    
  </entry>
  
  <entry>
    <title>Mac High Sierra 彻底删除bootcamp分区</title>
    <link href="http://mpwang.github.io/2018/05/05/delete-bootcamp-win10/"/>
    <id>http://mpwang.github.io/2018/05/05/delete-bootcamp-win10/</id>
    <published>2018-05-05T14:30:53.000Z</published>
    <updated>2018-05-05T15:40:19.483Z</updated>
    
    <content type="html"><![CDATA[<h1>bootcamp 无法删除 Windows 10分区</h1><p>很久之前在Mac上使用bootcamp安装了windows10, Mac升级到10.13.4 High Sierra之后发现自己几乎没用过win10.于是想删除bootcamp分区, 理想情况下使用bootcamp助理应该可以无痛删除win10分区. 然而mac在升级之后应该是使用了新的文件系统格式APFS.</p><p>打开bootcamp助理后, 提示错误: <code>启动磁盘不能被分区或恢复成单个分区</code>, 无法继续.</p><p>官方说明: <a href="https://support.apple.com/zh-cn/HT203913" target="_blank" rel="noopener">将 Boot Camp 升级到 Windows 8.1 或更高版本时，您可能会看到一则警告信息“启动磁盘不能被分区或恢复成单个分区”</a>。</p><p>于是开始折腾. 在没有做数据备份的情况下, 一路有惊无险, 记录解决过程如下.</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">警告：磁盘操作具有破坏性、高风险，建议操作前做好备份. 你必须十分清楚自己在做什么.</span><br></pre></td></tr></table></figure><h1>分区情况</h1><p>找开磁盘工具查看分区表, 这里借用网上找到的一张图片, 操作之前没有截图.</p><p><img src="/images/bootcamp.jpg" alt="分区"></p><p>我的情况是除了mac APFS分区顺时针有一个8G的未格式化可用空间, 40G的windows10分区, 以及一个800M的disk0s4额外分区(Microsoft 保留或者Windows 恢复分区).</p><p>使用<code>diskutil</code>工具查看分区表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">╰─ diskutil list</span><br><span class="line">/dev/disk0 (internal):</span><br><span class="line"><span class="meta">   #</span><span class="bash">:                       TYPE NAME                    SIZE       IDENTIFIER</span></span><br><span class="line">   0:      GUID_partition_scheme                         251.0 GB   disk0</span><br><span class="line">   1:                        EFI EFI                     314.6 MB   disk0s1</span><br><span class="line">   2:                 Apple_APFS Container disk1         201.4 GB   disk0s2</span><br><span class="line">   3:       Microsoft Basic Data BOOTCAMP                39.8 GB    disk0s3</span><br><span class="line">   4:           Windows Recovery                         892.3 MB   disk0s4</span><br><span class="line"></span><br><span class="line">/dev/disk1 (synthesized):</span><br><span class="line"><span class="meta">   #</span><span class="bash">:                       TYPE NAME                    SIZE       IDENTIFIER</span></span><br><span class="line">   0:      APFS Container Scheme -                      +201.4 GB   disk1</span><br><span class="line">                                 Physical Store disk0s2</span><br><span class="line">   1:                APFS Volume Macintosh HD            166.1 GB   disk1s1</span><br><span class="line">   2:                APFS Volume Preboot                 22.7 MB    disk1s2</span><br><span class="line">   3:                APFS Volume Recovery                517.8 MB   disk1s3</span><br><span class="line">   4:                APFS Volume VM                      3.2 GB     disk1s4</span><br></pre></td></tr></table></figure><p><strong>这里注意到8G的未格式化可用空间的分区在分区表中找不到</strong>.</p><p>这里也决定了我按照官方的操作方法无法成功. 在磁盘工具分区里删除选择disk04分区, 点击上图<code>-</code>号后, 应用里提示错误: <code>无法找到其中一个分区</code>. 我推测这里应该是找不到8G空间那个分区导致无法使用磁盘工具正常删除disk0s4分区.</p><p><img src="/images/bootcamp1.png" alt="删除失败"></p><h1>diskutil eraseVolume</h1><p>使用命令行工具删除disk0s4分区, 然后删除disk0s3分区(bootcamp分区). 这里顺序<span style="color: red"><strong>很重要</strong></span>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">╰─ sudo diskutil eraseVolume JHFS+ deleteme /dev/disk0s4</span><br><span class="line">Password:</span><br><span class="line">Started erase on disk0s4</span><br><span class="line">Unmounting disk</span><br><span class="line">Erasing</span><br><span class="line">Initialized /dev/rdisk0s4 as a 851 MB case-insensitive HFS Plus volume with a 8192k journal</span><br><span class="line">Mounting disk</span><br><span class="line">Finished erase on disk0s4 deleteme</span><br><span class="line"></span><br><span class="line">╰─ sudo diskutil eraseVolume JHFS+ deleteme /dev/disk0s3</span><br><span class="line">Started erase on disk0s3 BOOTCAMP</span><br><span class="line">Unmounting disk</span><br><span class="line">Erasing</span><br><span class="line">Initialized /dev/rdisk0s3 as a 37 GB case-insensitive HFS Plus volume with a 8192k journal</span><br><span class="line">Mounting disk</span><br><span class="line">Finished erase on disk0s3 deleteme</span><br></pre></td></tr></table></figure><p>这时使用磁盘工具, 选择根卷分区, 选择disk0s4分区, 点击减号, 选择disk0s3分区, 点击减号. 可以成功合并原来disk0s4 disk0s3的空间.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">╰─ diskutil list</span><br><span class="line">/dev/disk0 (internal):</span><br><span class="line"><span class="meta">   #</span><span class="bash">:                       TYPE NAME                    SIZE       IDENTIFIER</span></span><br><span class="line">   0:      GUID_partition_scheme                         251.0 GB   disk0</span><br><span class="line">   1:                        EFI EFI                     314.6 MB   disk0s1</span><br><span class="line">   2:                 Apple_APFS Container disk1         201.4 GB   disk0s2</span><br><span class="line">   3:                  Apple_HFS deleteme                40.5 GB    disk0s3</span><br><span class="line"></span><br><span class="line">/dev/disk1 (synthesized):</span><br><span class="line"><span class="meta">   #</span><span class="bash">:                       TYPE NAME                    SIZE       IDENTIFIER</span></span><br><span class="line">   0:      APFS Container Scheme -                      +201.4 GB   disk1</span><br><span class="line">                                 Physical Store disk0s2</span><br><span class="line">   1:                APFS Volume Macintosh HD            166.1 GB   disk1s1</span><br><span class="line">   2:                APFS Volume Preboot                 22.7 MB    disk1s2</span><br><span class="line">   3:                APFS Volume Recovery                517.8 MB   disk1s3</span><br><span class="line">   4:                APFS Volume VM                      2.1 GB     disk1s4</span><br></pre></td></tr></table></figure><p>这时已经将bootcamp分区 disk0s3 格式化成 HFS+ 格式. 但是由于那个8G空间分区无法在分区表中找到. 始终无法使用磁盘工具将8G空间分区和bootcamp分区合并到mac APFS分区中.</p><h1>diskutil mergePartitions</h1><p>根据网上找到的资料, 开始作死使用<code>diskutil mergePartitions</code>命令尝试合并分区.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">╰─ diskutil mergePartitions --help</span><br><span class="line">Usage:  diskutil mergePartitions [force] format name</span><br><span class="line">        DiskIdentifier|DeviceNode DiskIdentifier|DeviceNode</span><br><span class="line">Merge two or more pre-existing partitions into one. The first disk parameter</span><br><span class="line">is the starting partition; the second disk parameter is the ending partition;</span><br><span class="line">this given range of two or more partitions will be merged into one.</span><br><span class="line">All partitions in the range, except for the first one, must be unmountable.</span><br><span class="line">All data on merged partitions other than the first will be lost; data on the</span><br><span class="line">first partition will be lost as well if the "force" argument is given.</span><br><span class="line">If "force" is not given, and the first partition has a resizable file system</span><br><span class="line">(e.g. JHFS+), it will be grown in a data-preserving manner, even if a different</span><br><span class="line">file system is specified (in fact, your file system and volume name parameters</span><br><span class="line">are both ignored in this case). Also, if "force" is not given, and the first</span><br><span class="line">partition is not resizable, you will be prompted if you want to erase.</span><br><span class="line">However, if "force" is given, the first partition is always formatted. You</span><br><span class="line">should do this if you wish to reformat to a new file system type.</span><br><span class="line">Merged partitions are required to be ordered sequentially on disk.</span><br><span class="line">See `diskutil list` for the actual on-disk ordering; BSD slice identifiers</span><br><span class="line">may in certain circumstances not always be in numerical order but the</span><br><span class="line">top-to-bottom order given by diskutil list is always the on-disk order.</span><br><span class="line">Ownership of the affected disk is required.</span><br><span class="line">Example: diskutil mergePartitions JHFS+ NewName disk3s4 disk3s7</span><br><span class="line">         This example will merge all partitions *BETWEEN* disk3s4 and disk3s7,</span><br><span class="line">         preserving data on disk3s4 but destroying data on disk3s5, disk3s6,</span><br><span class="line">         disk3s7 and any invisible free space partitions between those disks;</span><br><span class="line">         disk3s4 will be grown to cover the full space if possible.</span><br></pre></td></tr></table></figure><p>发现无法成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">╰─ diskutil mergePartitions APFS randall disk0s2 disk0s3</span><br><span class="line">You cannot merge disks into an APFS Physical Store</span><br><span class="line">Instead, you can delete the partitions following the APFS Physical Store by</span><br><span class="line">using "diskutil eraseVolume free n &lt;disk&gt;" for all such partitions, and</span><br><span class="line">then by growing the corresponding APFS Container by its APFS Physical Store</span><br><span class="line">to fill the gap by using "diskutil apfs resizeContainer disk0s2 0"</span><br></pre></td></tr></table></figure><h1>diskutil apfs resizeContainer</h1><p>不得不赞mac命令行工具的提示真的做得非常好, 在这里发现了<span style="color: red">关键性的信息</span>:</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APFS格式分区可以使用diskutil apfs resizeContainer命令自动扩展空间到下一个可用分区.</span><br></pre></td></tr></table></figure><p>8G空间分区本身是未格式化的, 符合要求.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">╰─ diskutil apfs resizeContainer disk0s2 0</span><br><span class="line">Started APFS operation</span><br><span class="line">Aligning grow delta to 8,650,686,464 bytes and targeting a new physical store size of 210,007,728,128 bytes</span><br><span class="line">Determined the maximum size for the targeted physical store of this APFS Container to be 210,007,728,128 bytes</span><br><span class="line">Resizing APFS Container designated by APFS Container Reference disk1</span><br><span class="line">The specific APFS Physical Store being resized is disk0s2</span><br><span class="line">Verifying storage system</span><br><span class="line">Using live mode</span><br><span class="line">Performing fsck_apfs -n -x -l /dev/disk0s2</span><br><span class="line">Checking volume</span><br><span class="line">Checking the container superblock</span><br><span class="line">Checking the EFI jumpstart record</span><br><span class="line">Checking the space manager</span><br><span class="line">Checking the object map</span><br><span class="line">Checking the APFS volume superblock</span><br><span class="line">Checking the object map</span><br><span class="line">Checking the fsroot tree</span><br><span class="line">Checking the snapshot metadata tree</span><br><span class="line">Checking the extent ref tree</span><br><span class="line">Checking the snapshots</span><br><span class="line">Checking the APFS volume superblock</span><br><span class="line">Checking the object map</span><br><span class="line">Checking the fsroot tree</span><br><span class="line">Checking the snapshot metadata tree</span><br><span class="line">Checking the extent ref tree</span><br><span class="line">Checking the snapshots</span><br><span class="line">Checking the APFS volume superblock</span><br><span class="line">Checking the object map</span><br><span class="line">Checking the fsroot tree</span><br><span class="line">Checking the snapshot metadata tree</span><br><span class="line">Checking the extent ref tree</span><br><span class="line">Checking the snapshots</span><br><span class="line">Checking the APFS volume superblock</span><br><span class="line">Checking the object map</span><br><span class="line">Checking the fsroot tree</span><br><span class="line">Checking the snapshot metadata tree</span><br><span class="line">Checking the extent ref tree</span><br><span class="line">Checking the snapshots</span><br><span class="line">Verifying allocated space</span><br><span class="line">The volume /dev/disk0s2 appears to be OK</span><br><span class="line">Storage system check exit code is 0</span><br><span class="line">Growing APFS Physical Store disk0s2 from 201,357,041,664 to 210,007,728,128 bytes</span><br><span class="line">Modifying partition map</span><br><span class="line">Growing APFS data structures</span><br><span class="line">Finished APFS operation</span><br></pre></td></tr></table></figure><p>运行成功, 打分磁盘工具, 查看根卷分区, 发现8G空间分区已经被合并至APFS分区, 只剩下一个40G的bootcamp分区.</p><p>选择bootcamp分区, 点击减号, 应用成功. 成功将所有分区合并成一个完整大分区.</p><p>现在Mac只有一个分区了.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">╰─ diskutil list</span><br><span class="line">/dev/disk0 (internal):</span><br><span class="line"><span class="meta">   #</span><span class="bash">:                       TYPE NAME                    SIZE       IDENTIFIER</span></span><br><span class="line">   0:      GUID_partition_scheme                         251.0 GB   disk0</span><br><span class="line">   1:                        EFI EFI                     314.6 MB   disk0s1</span><br><span class="line">   2:                 Apple_APFS Container disk1         250.7 GB   disk0s2</span><br><span class="line"></span><br><span class="line">/dev/disk1 (synthesized):</span><br><span class="line"><span class="meta">   #</span><span class="bash">:                       TYPE NAME                    SIZE       IDENTIFIER</span></span><br><span class="line">   0:      APFS Container Scheme -                      +250.7 GB   disk1</span><br><span class="line">                                 Physical Store disk0s2</span><br><span class="line">   1:                APFS Volume Macintosh HD            168.9 GB   disk1s1</span><br><span class="line">   2:                APFS Volume Preboot                 22.7 MB    disk1s2</span><br><span class="line">   3:                APFS Volume Recovery                517.8 MB   disk1s3</span><br><span class="line">   4:                APFS Volume VM                      2.1 GB     disk1s4</span><br></pre></td></tr></table></figure><p>Done.</p><hr><p>参考: <a href="https://www.chadou.me/p/206" target="_blank" rel="noopener">BOOTCAMP 分区无法删除</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;bootcamp 无法删除 Windows 10分区&lt;/h1&gt;
&lt;p&gt;很久之前在Mac上使用bootcamp安装了windows10, Mac升级到10.13.4 High Sierra之后发现自己几乎没用过win10.
于是想删除bootcamp分区, 理想情况下使用
      
    
    </summary>
    
    
      <category term="Mac" scheme="http://mpwang.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>如何使用sqlalchemy构造SQL语句</title>
    <link href="http://mpwang.github.io/2018/05/05/construct-sql/"/>
    <id>http://mpwang.github.io/2018/05/05/construct-sql/</id>
    <published>2018-05-05T10:14:23.000Z</published>
    <updated>2018-05-05T14:03:44.763Z</updated>
    
    <content type="html"><![CDATA[<p>sqlalchemy作为ORM层工具可以方便地编程式操作数据库, 但有时与外部系统交互时需要生成raw sql语句, 利用sqlalchemy可能方便地动态构造成sql语句.</p><p>假设我们有两个类代表User, Address两张表.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> ForeignKey</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> relationship</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'users'</span></span><br><span class="line"></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name = Column(String)</span><br><span class="line">    fullname = Column(String)</span><br><span class="line">    password = Column(String)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'addresses'</span></span><br><span class="line"></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    email_address = Column(String, nullable=<span class="keyword">False</span>)</span><br><span class="line">    user_id = Column(Integer, ForeignKey(<span class="string">'users.id'</span>))</span><br><span class="line"></span><br><span class="line">    user = relationship(<span class="string">"User"</span>, lazy=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><p>利用<code>Query</code>构造生需要的语句, 使用<code>compile</code><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>输出query代表的sql语句.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> Query</span><br><span class="line"></span><br><span class="line">filters = &#123;<span class="string">'user_id'</span>: <span class="number">1</span>&#125;</span><br><span class="line">query = Query(Address).filter_by(**filters)</span><br><span class="line">query = query.statement.compile(compile_kwargs=&#123;<span class="string">'literal_binds'</span>: <span class="keyword">True</span>&#125;)</span><br><span class="line"><span class="keyword">print</span> query</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT addresses<span class="selector-class">.id</span>, addresses<span class="selector-class">.email_address</span>, addresses<span class="selector-class">.user_id</span>, users_1<span class="selector-class">.id</span>, users_1<span class="selector-class">.name</span>, users_1<span class="selector-class">.fullname</span>, users_1.password</span><br><span class="line">FROM addresses LEFT OUTER JOIN users AS users_1 ON users_1<span class="selector-class">.id</span> = addresses<span class="selector-class">.user_id</span> </span><br><span class="line">WHERE addresses<span class="selector-class">.user_id</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>注意输出中包含了<code>Address.user</code>字段代表的join操作, 如果不需要这些字段可以<code>lazyload</code><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>取消.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> lazyload</span><br><span class="line"></span><br><span class="line">filters = &#123;<span class="string">'user_id'</span>: <span class="number">1</span>&#125;</span><br><span class="line">query = Query(Address).filter_by(**filters)</span><br><span class="line">query = query.options(lazyload(<span class="string">'*'</span>))</span><br><span class="line">query = query.statement.compile(compile_kwargs=&#123;<span class="string">'literal_binds'</span>: <span class="keyword">True</span>&#125;)</span><br><span class="line"><span class="keyword">print</span> query</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT addresses<span class="selector-class">.id</span>, addresses<span class="selector-class">.email_address</span>, addresses.user_id</span><br><span class="line">FROM addresses </span><br><span class="line">WHERE addresses<span class="selector-class">.user_id</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="http://docs.sqlalchemy.org/en/latest/faq/sqlexpressions.html#how-do-i-render-sql-expressions-as-strings-possibly-with-bound-parameters-inlined" target="_blank" rel="noopener">How do I render SQL expressions as strings, possibly with bound parameters inlined?</a> <a href="#fnref1" class="footnote-backref">↩</a></p></li><li id="fn2" class="footnote-item"><p><a href="http://docs.sqlalchemy.org/en/latest/orm/loading_relationships.html#controlling-loading-via-options" target="_blank" rel="noopener">Controlling Loading via Options</a> <a href="#fnref2" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;sqlalchemy作为ORM层工具可以方便地编程式操作数据库, 但有时与外部系统交互时需要生成raw sql语句, 利用sqlalchemy可能方便地动态构造成sql语句.&lt;/p&gt;
&lt;p&gt;假设我们有两个类代表User, Address两张表.&lt;/p&gt;
&lt;figure cl
      
    
    </summary>
    
    
      <category term="Python" scheme="http://mpwang.github.io/tags/Python/"/>
    
      <category term="SQLAlchemy" scheme="http://mpwang.github.io/tags/SQLAlchemy/"/>
    
  </entry>
  
  <entry>
    <title>Python项目入门培训文档</title>
    <link href="http://mpwang.github.io/2017/09/02/python-intro/"/>
    <id>http://mpwang.github.io/2017/09/02/python-intro/</id>
    <published>2017-09-01T16:42:02.000Z</published>
    <updated>2017-09-01T17:09:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Intro</h1><p>本篇文档是由近期给公司校招的新人（没有Python背景）准备的培训资料整理而来，学习计划以学员的自学为主。根据实践平均每周学员需要花费1-2天的时间，每周再加上一个小时跟踪和讲解相关内容。</p><p>教程并不是单纯的Python语言培训，侧重点在于让新人快速参与项目开发。</p><h1>Python学习计划</h1><h2>受众</h2><p>假定学员熟悉基本的编程概念，使用过Java/C/C++其中一门语言，有一定项目开发经验</p><h2>目标</h2><p>预计为期8周的阅读及学习计划，以完成每周设定的任务的方式引导学习Python语言以及相关开发知识，帮助学员进行Python项目开发</p><p>需要完成的任务包括：</p><ul><li>完成参考资料的阅读（扩展阅读不作要求）</li><li>完成一些具体的编程练习</li><li>阅读一些库的文档并编写例子初步掌握使用</li></ul><h2>进度反馈及跟踪</h2><p>每周会有例会跟踪进度，平时的反馈我们可以通过邮件交流</p><p>randall.wjz@gmail.com</p><h1>第1周 Intro</h1><h2>本周目标</h2><p>在开始学习Python语言的具体知识细节前了解一些背景知识，以及设置一个Python开发环境</p><h2>请完成以下材料的阅读</h2><h3>背景知识了解</h3><ol><li><p>简单的Python历史介绍</p><p><a href="https://www.15yan.com/story/1JKTBQvVk5e/" target="_blank" rel="noopener">人生苦短，我用Python</a></p></li><li><p>Python语言的设计哲学</p><ul><li><a href="https://www.python.org/dev/peps/pep-0020/" target="_blank" rel="noopener">The Zen of Python</a></li><li><a href="https://wiki.python.org/moin/PythonZenChineseTranslate" target="_blank" rel="noopener">中文翻译参考</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">The Zen of Python, by Tim Peters</span><br><span class="line"></span><br><span class="line">Beautiful is better than ugly.</span><br><span class="line">Explicit is better than implicit.</span><br><span class="line">Simple is better than complex.</span><br><span class="line">Complex is better than complicated.</span><br><span class="line">Flat is better than nested.</span><br><span class="line">Sparse is better than dense.</span><br><span class="line">Readability counts.</span><br><span class="line">Special cases aren&apos;t special enough to break the rules.</span><br><span class="line">Although practicality beats purity.</span><br><span class="line">Errors should never pass silently.</span><br><span class="line">Unless explicitly silenced.</span><br><span class="line">In the face of ambiguity, refuse the temptation to guess.</span><br><span class="line">There should be one-- and preferably only one --obvious way to do it.</span><br><span class="line">Although that way may not be obvious at first unless you&apos;re Dutch.</span><br><span class="line">Now is better than never.</span><br><span class="line">Although never is often better than right now.</span><br><span class="line">If the implementation is hard to explain, it&apos;s a bad idea.</span><br><span class="line">If the implementation is easy to explain, it may be a good idea.</span><br><span class="line">Namespaces are one honking great idea -- let&apos;s do more of those!</span><br></pre></td></tr></table></figure></li><li><p>Python社区</p><ul><li><a href="https://pythonguidecn.readthedocs.io/zh/latest/intro/community.html" target="_blank" rel="noopener">社区</a></li><li>PEP，中文翻译为Python增强提议。这个词经常在Python学习过程中看到，了解什么是PEP</li><li>PSF，Python Software Foundation, Python软件基金会</li><li>PyCon,每年社区举办的Python开发者大会，youtube上可以找到与会演讲视频</li></ul></li><li><p>了解Python2和Python3的现状</p><ul><li><a href="https://wiki.python.org/moin/Python2orPython3" target="_blank" rel="noopener">Should I use Python 2 or Python 3 for my developmentactivity?</a></li><li>Python2版本将于2020年正式停止更新维护，Python语言的未来以及最新改进在Python3版本上进行</li><li>新项目应该默认使用Python3进行开发</li><li>现存的大量项目以及第三库使用Python2版本，流行的Python库大多兼容Python2/3版本</li><li>目前公司的项目使用Python2版本</li></ul></li></ol><h3>编程环境设置</h3><ol><li><p>选择Python解释器</p><p><a href="https://python-guide-pt-br.readthedocs.io/en/latest/starting/which-python/" target="_blank" rel="noopener">Picking anInterpreter</a></p></li><li><p>安装Python</p><p><a href="https://python-guide-pt-br.readthedocs.io/en/latest/starting/installation/" target="_blank" rel="noopener">Properly InstallingPython</a></p></li><li><p>了解pip</p><p>Python的包管理工具，类比Java语言的Maven工具</p><ul><li><a href="https://xin053.github.io/2016/07/02/pip%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">pip包管理器使用详解</a></li><li><a href="https://pip-cn.readthedocs.io/en/latest/quickstart.html" target="_blank" rel="noopener">文档</a></li></ul></li><li><p>IDE &amp; Editor</p><p>项目组使用PyCharm进行Python开发，请下载安装并熟悉使用</p><ul><li><a href="http://www.jianshu.com/p/259fdc97bfe2" target="_blank" rel="noopener">介绍</a></li><li><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">官网</a></li></ul><p>前端项目使用VS Code作为开发环境</p><ul><li><a href="https://jeasonstudio.gitbooks.io/vscode-cn-doc/content/md/%E7%BC%96%E8%BE%91%E5%99%A8/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E7%94%A8VSCode.html" target="_blank" rel="noopener">Why Visual Studio Code? -为什么选用VSCode</a></li><li><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">官网</a></li></ul></li></ol><h1>编程练习</h1><ul><li>在本地安装设置好Python2.7开发环境</li><li>使用pip安装requests库，<a href="http://docs.python-requests.org/en/master/user/install/" target="_blank" rel="noopener">参考资料</a></li><li>安装并设置好PyCharm</li><li>使用PyCharm建立项目，编写程序使用requests使用GET请求访问<a href="http://www.bing.com" target="_blank" rel="noopener">http://www.bing.com</a>并输出内容，<a href="http://docs.python-requests.org/en/master/user/quickstart/#make-a-request" target="_blank" rel="noopener">参考资料</a></li></ul><h2>扩展阅读</h2><ul><li><a href="http://py3readiness.org/" target="_blank" rel="noopener">Python流行的第三方库支持Python3的情况</a></li><li>前端项目使用<a href="https://standardjs.com/readme-zhcn.html" target="_blank" rel="noopener">JavaScript StandardStyle</a> 作为代码风格标准</li><li><a href="https://pythonclock.org/" target="_blank" rel="noopener">pythonclock</a></li></ul><h1>第2周 开始Python学习</h1><h2>本周目标</h2><p>本周将进行为期三周的Python语言学习，每周将指定的一些练习题目，请尝试完成（来源于PythonKoan项目）。</p><p>阅读材料中将列出一些参考的Python学习教程，学员会有比较充足的时间进行自由的学习。</p><h2>Python Koan项目</h2><p>PythonKoan是通过TDD进行Python学习的一个项目，<a href="https://github.com/gregmalcolm/python_koans" target="_blank" rel="noopener">项目地址</a>请下载并按照文档设置，注意我们使用python2文件夹下的代码</p><p>每个题目都关于Python语言的一个特性，完成题目可以帮助掌握这个特性。如遇到题目涉及到的教程中没有提及的概念，可以跳过。 <a href="https://github.com/sourabhv/python-koans-solutions/tree/master/python3/koans" target="_blank" rel="noopener">Python Koan答案参考</a>（注意此答案使用Python3版本）</p><h2>阅读材料</h2><h3>快速入门</h3><ul><li><a href="https://stephensugden.com/crash_into_python/" target="_blank" rel="noopener">写给有经验程序员的Python入门教程</a>快速了解Python特性</li><li><a href="https://dzone.com/refcardz/core-python" target="_blank" rel="noopener">Python 核心特性</a> Section1-11</li></ul><h3>请完成以下教程</h3><ul><li><a href="https://pymbook.readthedocs.io/en/py2/" target="_blank" rel="noopener">Welcome to Python for you andme</a> （比较简洁，PEP8Guidelines，Virtualenv及之后章节可跳过)</li></ul><h2>编程练习 | 本周的Python Koan题目</h2><ul><li>about~asserts~.py</li><li>about~strings~.py</li><li>about~none~.py</li><li>about~lists~.py</li><li>about~listassignments~.py</li><li>about~dictionaries~.py</li><li>about~stringmanipulation~.py</li><li>about~tuples~.py</li><li>about~methods~.py</li><li>about~controlstatements~.py</li><li>about~trueandfalse~.py</li><li>about~sets~.py</li></ul><h1>第3周 继续Python Koan题目</h1><h2>本周目标</h2><h2>阅读材料</h2><h3>请完成以下教程</h3><ul><li><a href="https://docs.python.org/2.7/tutorial/index.html" target="_blank" rel="noopener">Python官方入门教程</a>(阅读2-9章节即可)</li></ul><h2>编程练习 | 本周的Python Koan题目</h2><ul><li>about~triangleproject~.py</li><li>about~exceptions~.py</li><li>about~triangleproject2~.py</li><li>about~iteration~.py</li><li>about~comprehension~.py</li><li>about~generators~.py</li><li>about~lambdas~.py</li><li>about~scoringproject~.py</li><li>about~classes~.py</li><li>about~newstyleclasses~.py</li><li>about~withstatements~.py</li><li>about~monkeypatching~.py</li><li>about~diceproject~.py</li><li>about~methodbindings~.py</li></ul><h1>第4周 decorator and context manager</h1><h2>本周目标</h2><p>相信大家对编程语言中的基于数据和基于函数的抽象都不陌生，现在来看一下Python对于基于语法的抽象的支持。</p><ul><li>了解Python中装饰器(decorator)的概念</li><li>了解Python中上下文管理器(context manager)的概念</li></ul><h2>阅读材料</h2><ul><li><a href="https://www.cnblogs.com/vamei/archive/2013/02/16/2820212.html" target="_blank" rel="noopener">装饰器</a>简短介绍</li><li><a href="https://www.thecodeship.com/patterns/guide-to-python-function-decorators/" target="_blank" rel="noopener">A guide to Python's functiondecorators</a></li><li><a href="https://www.cnblogs.com/vamei/archive/2012/11/23/2772445.html" target="_blank" rel="noopener">上下文管理器</a>简短介绍</li><li><a href="http://arnavk.com/posts/python-context-managers/" target="_blank" rel="noopener">Python in the real world: ContextManagers</a></li></ul><h2>编程练习 | 本周的Python Koan题目</h2><ul><li>about~decoratingwithfunctions~.py</li><li>about~decoratingwithclasses~.py</li><li>about~inheritance~.py</li><li>about~multipleinheritance~.py</li><li>about~scope~.py</li><li>about~modules~.py</li><li>about~packages~.py</li><li>about~classattributes~.py</li><li>about~attributeaccess~.py</li><li>about~deletingobjects~.py</li><li>about~proxyobjectproject~.py</li><li>about~proxyobjectproject~.py</li><li>about~extracredit~.py</li><li>about~regex~.py</li></ul><h2>扩展阅读</h2><ul><li><a href="https://pymotw.com/2/contextlib/" target="_blank" rel="noopener">标准库中的context manager工具</a></li></ul><h2>参考书目</h2><p>学习了两个教程之后对Python语言已经有大致的了解，接下来如果需要深入学习，建议找一些严肃的书籍进行系统性的学习。</p><ul><li><a href="http://fwww.pythonbooks.org" target="_blank" rel="noopener">python books</a></li><li><a href="https://pythonguidecn.readthedocs.io/zh/latest/intro/learning.html" target="_blank" rel="noopener">学习Python</a>资源</li><li><a href="https://www.fullstackpython.com/best-python-resources.html" target="_blank" rel="noopener">Best PythonResources</a>Full Stack Python 本身也是很好的学习资源</li></ul><h1>第5周 编程风格与命令行开发</h1><h2>本周目标</h2><p>了解Python编程风格及命令行开发工具.</p><p>Python code style 业界现在有两个标准，PEP8 以及 <a href="https://google.github.io/styleguide/pyguide.html" target="_blank" rel="noopener">Google Python StyleGuide</a>项目组采用PEP8标准，对于Google Style可以稍作了解</p><p>除了日常在IDE里进行Python开发，开发人员也应该掌握一些在命令行环境下进行编程和debug的技能</p><h2>阅读材料</h2><ul><li><a href="https://pythonguidecn.readthedocs.io/zh/latest/writing/style.html" target="_blank" rel="noopener">代码风格</a><a href="http://docs.python-guide.org/en/latest/writing/style/" target="_blank" rel="noopener">英文版</a></li><li><a href="https://pythonguidecn.readthedocs.io/zh/latest/dev/virtualenvs.html" target="_blank" rel="noopener">虚拟环境</a>virtualenv</li><li><a href="https://pythonguidecn.readthedocs.io/zh/latest/dev/pip-virtualenv.html" target="_blank" rel="noopener">Pip和Virtualenv的更多配置</a></li><li><a href="http://pep8.org/" target="_blank" rel="noopener">PEP8</a>建议阅读这个美化过的排版，<a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener">原版</a>地址</li><li><a href="https://github.com/google/yapf" target="_blank" rel="noopener">yapf</a> Google出品的自动化格式代码工具，建议了解一下</li></ul><h3>ipython</h3><ul><li><p><a href="https://ipython.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>作为一个交互式shell, 用来代替默认的python命令行编程环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使用以下命令安装python2.7版本的ipython</span><br><span class="line">pip install &apos;ipython&lt;=6.0.0&apos;</span><br></pre></td></tr></table></figure></li></ul><h3>pdb</h3><p>Python debuger, 交互式debug环境。类似于GDB</p><ul><li><a href="https://pymotw.com/2/pdb/index.html" target="_blank" rel="noopener">使用教程</a></li></ul><h3>vim</h3><p>命令行环境下的编辑器</p><ul><li><a href="http://www.openvim.com/" target="_blank" rel="noopener">交互式的VIM简短教程</a>十分炫酷的简短教程，掌握日常用到的最基本操作</li></ul><h2>编程练习</h2><p>本周没有具体的编程练习，请花一点时间熟悉一下pip/virtualenv/ipython/pdb/vim工具。</p><p>编辑器/IDE是非常重要的工具，在工作过程中几乎所有的开发时间都花这上面，所以不论你喜欢vim/emacs/vs code/atom/sublimetext，你应该熟悉你的编程器/IDE。花些时间去了解 你喜欢的编程器/IDE</p><p>适当设置好开发环境对于提高开发效率也相当重要，有兴趣可以了解一下扩展阅读里列出的工具</p><h2>扩展阅读</h2><ul><li><a href="https://pythonguidecn.readthedocs.io/zh/latest/dev/env.html" target="_blank" rel="noopener">你的开发环境</a><a href="http://docs.python-guide.org/en/latest/dev/env/" target="_blank" rel="noopener">英文版</a></li><li><a href="https://aaaaaashu.gitbooks.io/mac-dev-setup/content/index.html" target="_blank" rel="noopener">Mac开发配置手册</a></li></ul><h3>windows开发环境</h3><p>个人推荐 Cygwin + ConEmu + zsh + oh-my-shell + CoreUtils</p><ul><li><a href="https://cygwin.com/install.html" target="_blank" rel="noopener">Cygwin</a></li><li><a href="https://conemu.github.io/" target="_blank" rel="noopener">ConEmu</a></li><li><a href="http://www.jeffjade.com/2015/07/29/2015-07-29-mac-musthave-software/" target="_blank" rel="noopener">终极Shell</a>在Cygwin环境中也可以使用zsh + oh-my-zsh</li><li><a href="http://gnuwin32.sourceforge.net/packages/coreutils.htm" target="_blank" rel="noopener">CoreUtils forWindows</a>常用的liunx命令windows移植</li><li><a href="http://www.jianshu.com/p/aa19380828bd" target="_blank" rel="noopener">配置豪华的 Windows 开发环境</a></li></ul><h1>第6周 标准库及其它</h1><h2>本周目标</h2><p>大概了解下Python标准库, 一些第三库/框架</p><h2>阅读材料</h2><h3>标准库</h3><ul><li><a href="https://www.cnblogs.com/vamei/archive/2012/07/18/2597212.html" target="_blank" rel="noopener">Python标准库——走马观花</a></li><li><a href="https://www.cnblogs.com/vamei/archive/2012/08/31/2661870.html" target="_blank" rel="noopener">Python标准库01 正则表达式(re包)</a></li><li><a href="https://www.cnblogs.com/vamei/archive/2012/09/05/2671198.html" target="_blank" rel="noopener">Python标准库03 路径与文件 (os.path包,glob包)</a></li><li><a href="https://www.cnblogs.com/vamei/archive/2012/09/14/2684775.html" target="_blank" rel="noopener">Python标准库04 文件管理(部分os包，shutil包)</a></li><li><a href="https://www.cnblogs.com/vamei/archive/2012/09/23/2698014.html" target="_blank" rel="noopener">Python标准库06 子进程(subprocess包)</a></li><li><a href="https://www.cnblogs.com/vamei/archive/2012/10/11/2720042.html" target="_blank" rel="noopener">Python标准库08 多线程与同步(threading包)</a></li></ul><h3>常用库</h3><ol><li><p>Oslo</p><p>Oslo是由openstack项目衍生出来的一系列python库，为openstack众多项目提供统一的公共功能。</p><blockquote><p>To produce a set of python libraries containing code shared byOpenStack projects. The APIs provided by these libraries should behigh quality, stable, consistent, documented and generallyapplicable</p></blockquote><ul><li><a href="https://wiki.openstack.org/wiki/Oslo" target="_blank" rel="noopener">官方Wiki Oslo库列表</a></li></ul><p>阅读使用和配置文档，大概了解这些包是用做什么的即可。</p><ul><li>oslo.cache</li><li>oslo.concurrency</li><li>oslo.config</li><li>oslo.log</li><li>oslo.policy</li><li>pbr</li></ul></li><li><p>SQLAlchemy</p><p>SQLAlchemy 是一个连接数据库的ORM框架 大概了解 SQLAlchemy的简单使用方式，不要求深入了解</p><ul><li><a href="https://www.sqlalchemy.org/" target="_blank" rel="noopener">官网</a></li><li><a href="http://www.jianshu.com/p/e6bba189fcbd" target="_blank" rel="noopener">简单介绍</a></li><li><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0014021031294178f993c85204e4d1b81ab032070641ce5000" target="_blank" rel="noopener">简单使用教程</a></li></ul></li></ol><h1>第7周 开源工具</h1><h2>本周目标</h2><p>了解一些开源工具及项目开发协作相关工具</p><p>由于列出的工具较多，不要求深入了解</p><h2>阅读材料</h2><h3>Markdown</h3><p><a href="https://www.fullstackpython.com/markdown.html" target="_blank" rel="noopener">Markdown语法</a>平时写文档时可以使用Markdown语法</p><p>示例网站 <a href="https://maxiang.io/" target="_blank" rel="noopener">https://maxiang.io/</a>可以看到左边为文本内容，右边为渲染后的效果。使用markdown语法，书写文档时不需要关心排版效果，可以专注于内容本身。</p><h3>Git &amp;&amp; Gerrit</h3><p>项目组使用Git进行代码版本管理，使用Git是一项必备技能。如果以前没有使用Git的经验，请务必花一些时间学习。</p><ul><li><a href="https://github.com/larrycai/sdcamp/blob/master/contents/1-chapter2-git-gerrit.markdown" target="_blank" rel="noopener">版本控制Git和代码审阅Gerrit</a></li><li><a href="https://lvwzhen.gitbooks.io/git-tutorial/content/" target="_blank" rel="noopener">Git教程</a></li><li><a href="https://gerrit-review.googlesource.com/Documentation/intro-quick.html" target="_blank" rel="noopener">Gerrit Code Review - A QuickIntroduction</a></li></ul><h3>Jenkins &amp;&amp; CI</h3><ul><li><a href="https://gwpost.gitbooks.io/jenkins-the-definitive-guide/content/Introducting%20Jenkins/jie_shao.html" target="_blank" rel="noopener">Jenkins与持续集成(CI)介绍</a></li></ul><h3>tox</h3><ul><li><a href="http://wsfdl.com/python/2015/02/01/Python%E7%9A%84%E6%B5%8B%E8%AF%95%E4%B9%8BTox.html" target="_blank" rel="noopener">Python 的单元测试之tox</a></li><li><a href="https://tox.readthedocs.io/en/latest/" target="_blank" rel="noopener">tox官网介绍</a></li></ul><h3>运维利器 Ansible</h3><p>自动化运维工具，可以稍作了解，日常工作中可能会用到ansible工具来批量运行脚本</p><ul><li><a href="http://www.stay-stupid.com/?p=366" target="_blank" rel="noopener">Ansible 简介</a>阅读简介至ad-hoc部分即可</li><li><a href="https://ansible-tran.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">Ansible中文权威指南</a>如果有兴趣深入了解</li></ul><h1>第8周 实战</h1><h2>本周目标</h2><p>本周为编程练习，创建一个Python项目，并编程完成要求</p><p>这个项目是完成一个命令行工具，可以通过命令行调用来完成数据库表的CUDR操作</p><h2>编程练习</h2><h3>申请虚拟机作为开发机，要求CentOS7.2系统</h3><h3>配置pip文件</h3><h3>安装并配置PostgreSQL数据库</h3><p>tips: 可以使用 NaviCat pgAdmin 等数据库管理工具</p><p>配置数据库密码为 test123456</p><p>创建database, 名称: cudr</p><p>在 cudr 新建表，表名example</p><p>创建 sql 如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS &quot;public&quot;.&quot;example&quot;;</span><br><span class="line">CREATE TABLE &quot;public&quot;.&quot;example&quot; (</span><br><span class="line">&quot;name&quot; varchar(127) COLLATE &quot;default&quot; NOT NULL,</span><br><span class="line">&quot;code&quot; varchar(63) COLLATE &quot;default&quot; NOT NULL</span><br><span class="line">)</span><br><span class="line">WITH (OIDS=FALSE)</span><br><span class="line">;</span><br><span class="line">ALTER TABLE &quot;public&quot;.&quot;example&quot; ADD PRIMARY KEY (&quot;name&quot;);</span><br></pre></td></tr></table></figure><h3>创建一个Python项目</h3><p>项目名称 cudr</p><p>项目结构请阅读<a href="https://pythonguidecn.readthedocs.io/zh/latest/writing/structure.html" target="_blank" rel="noopener">结构化你的工程</a>中仓库的结构一节，关于 Django Applications及之后的章节可跳过</p><p>在 requirements.txt 文件中指定项目依赖库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlalchemy</span><br><span class="line">click</span><br></pre></td></tr></table></figure><p>使用pip安装依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><ol><li><p>click 用于创建命令行工具</p><ul><li><a href="http://click.pocoo.org/5/" target="_blank" rel="noopener">官网</a></li><li><a href="http://www.jianshu.com/p/d2b61a892c32" target="_blank" rel="noopener">简单使用教程</a></li></ul></li><li><p>sqlalchemy 数据库ORM工具</p></li></ol><h3>编程</h3><p>在 cudr/core.py 中完成具体的代码工作</p><p>具体代码实现以及命令行使用参数的设计可以自由发挥</p><p>最终效果要求可以完成类似以下功能(不要求和下面示例代码中一样)</p><ul><li>创建</li><li>读取</li><li>修改</li><li>删除</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个数据库记录</span><br><span class="line">python core.py --create name1 code1</span><br><span class="line"># 读取</span><br><span class="line">python core.py --read name1</span><br><span class="line"># 修改 指定主键name1及更新的字段及字段的新值</span><br><span class="line">python core.py --update name1 name=name2</span><br><span class="line"># 删除</span><br><span class="line">python core.py --delete name2</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;Intro&lt;/h1&gt;
&lt;p&gt;本篇文档是由近期给公司校招的新人（没有Python背景）准备的培训资料整理而来，学习计
划以学员的自学为主。根据实践平均每周学员需要花费1-2天的时间，每周再加上一个小时
跟踪和讲解相关内容。&lt;/p&gt;
&lt;p&gt;教程并不是单纯的Python语言培训
      
    
    </summary>
    
    
      <category term="Python" scheme="http://mpwang.github.io/tags/Python/"/>
    
      <category term="Tutorial" scheme="http://mpwang.github.io/tags/Tutorial/"/>
    
  </entry>
  
  <entry>
    <title>Python重构代码的一些模式</title>
    <link href="http://mpwang.github.io/2017/08/26/python-refactor-patterns/"/>
    <id>http://mpwang.github.io/2017/08/26/python-refactor-patterns/</id>
    <published>2017-08-26T14:02:56.000Z</published>
    <updated>2017-08-30T01:44:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>以下介绍一些<code>python idiom</code>，每当你在代码库中看到以下的模式可以参照以下的建议进行重构，让代码变得更加的<code>pythonic</code>，可读性更好，更容易维护。</p><p>代码示例Python版本为2.7</p><h1>enumerate</h1><blockquote class="blockquote-center"><p>需要使用列表的下标时，不要使用C风格的下标遍历</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DON'T</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">    <span class="keyword">print</span> i, <span class="string">'--&gt;'</span>, lst[i]</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(lst)):</span><br><span class="line">    <span class="keyword">print</span> i, <span class="string">'--&gt;'</span>, lst[i]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DO</span></span><br><span class="line"><span class="keyword">for</span> idx, item <span class="keyword">in</span> enumerate(lst):</span><br><span class="line">    <span class="keyword">print</span> idx, <span class="string">'--&gt;'</span>, item</span><br></pre></td></tr></table></figure><h1>zip/izip</h1><blockquote class="blockquote-center"><p>同时遍历两个列表时，不要使用C风格的下标遍历</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">lst2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DON'T</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(lst1)):</span><br><span class="line">    <span class="keyword">print</span> lst1[i]</span><br><span class="line">    <span class="keyword">print</span> lst2[i]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DO</span></span><br><span class="line"><span class="keyword">for</span> lst1_item, lst2_item <span class="keyword">in</span> zip(lst1, lst2):</span><br><span class="line">    <span class="keyword">print</span> lst1_item</span><br><span class="line">    <span class="keyword">print</span> lst2_item</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BETTER</span></span><br><span class="line"><span class="comment"># 不需要在内存中生成包含lst, lst2的第三个列表</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> izip</span><br><span class="line"><span class="keyword">for</span> lst1_item, lst2_item <span class="keyword">in</span> izip(lst1, lst2):</span><br><span class="line">    <span class="keyword">print</span> lst1_item</span><br><span class="line">    <span class="keyword">print</span> lst2_item</span><br></pre></td></tr></table></figure><h1>unpacking tuple</h1><h2>swap</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">y = <span class="number">-10</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DON'T</span></span><br><span class="line">tmp = x</span><br><span class="line">x = y</span><br><span class="line">y = tmp</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DO</span></span><br><span class="line">x, y = y, x</span><br></pre></td></tr></table></figure><h2>get element from tuple</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">words = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'cat'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DON'T</span></span><br><span class="line">foo = words[<span class="number">0</span>]</span><br><span class="line">bar = words[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DO</span></span><br><span class="line">foo, bar, _ = words <span class="comment"># 使用 _ 如果你不需要这个值</span></span><br></pre></td></tr></table></figure><h1>Dict.setdefault/defaultdict</h1><blockquote class="blockquote-center"><p>处理字典中key不存在时的默认值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># group words by frequency</span></span><br><span class="line">words = [(<span class="number">1</span>, <span class="string">'apple'</span>), (<span class="number">2</span>, <span class="string">'banana'</span>), (<span class="number">1</span>, <span class="string">'cat'</span>)]</span><br><span class="line">frequency = &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DON'T</span></span><br><span class="line"><span class="keyword">for</span> freq, word <span class="keyword">in</span> words:</span><br><span class="line">    <span class="keyword">if</span> freq <span class="keyword">not</span> <span class="keyword">in</span> frequency:</span><br><span class="line">        frequency[freq] = []</span><br><span class="line">    frequency[freq].append(word)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DO</span></span><br><span class="line"><span class="keyword">for</span> freq, word <span class="keyword">in</span> words:</span><br><span class="line">    frequency.setdefault(freq, []).append(word)</span><br></pre></td></tr></table></figure><p>如果你知道自己在做什么，use <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" target="_blank" rel="noopener">defaultdict</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BETTER</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">frequency = defaultdict(list)</span><br><span class="line"><span class="keyword">for</span> freq, word <span class="keyword">in</span> words:</span><br><span class="line">    frequency[freq].append(word)</span><br></pre></td></tr></table></figure><h1>Dict.iteritems</h1><blockquote class="blockquote-center"><p>遍历字典</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">words = &#123;<span class="string">'apple'</span>: <span class="number">1</span>, <span class="string">'banana'</span>: <span class="number">2</span>, <span class="string">'cat'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># OK</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    <span class="keyword">print</span> word, <span class="string">'--&gt;'</span>, words[word] <span class="comment"># 需要计算word的hash值</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GOOD</span></span><br><span class="line"><span class="keyword">for</span> word, freq <span class="keyword">in</span> words.items():</span><br><span class="line">    <span class="keyword">print</span> word, <span class="string">'--&gt;'</span>, freq</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BETTER</span></span><br><span class="line"><span class="comment"># 不需要在内存中生存包含words所有元素的中间结果</span></span><br><span class="line"><span class="keyword">for</span> word, freq <span class="keyword">in</span> words.iteritems():</span><br><span class="line">    <span class="keyword">print</span> word, <span class="string">'--&gt;'</span>, freq</span><br></pre></td></tr></table></figure><h1>for...else</h1><blockquote class="blockquote-center"><p>break and nobreak</p></blockquote><p>使用<code>for...else</code>模式处理遍历列表时搜索符合某些条件的元素<code>break</code>以及搜索不到符合条件元素时的情况。</p><p>有些人会认为<code>for...else</code>的语义让人迷惑所以不建议使用，但是正确地使用<code>for...else</code>模式会让代码的结构更加清晰。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># search if a word match some condition exists</span></span><br><span class="line">words = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'cat'</span>]</span><br><span class="line">condition = <span class="keyword">lambda</span> word: len(word) == <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DON'T</span></span><br><span class="line">found = <span class="keyword">False</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    <span class="keyword">if</span> condition(word):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Found'</span></span><br><span class="line">        found = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Not found'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DO</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    <span class="keyword">if</span> condition(word):</span><br><span class="line">        <span class="comment"># 处理存在符合condition的元素的情况</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Found'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 处理没有符合condition元素的情况</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Not found'</span></span><br></pre></td></tr></table></figure><p><code>else</code>在<code>for...else</code>语法里的语义是<code>如果没有break发生</code>，也即是列表被完全遍历的情况。代码清晰地分成了两部分，你可以明确地看到他们属于同一个结构。</p><p><code>for...else</code>语法让人迷惑的地方就是在于<code>else</code>这个名字，根据python核心开发者Raymond Hettinger的说法，如果他们有机会回到过去修改这一语法的话，他们会将<code>else</code>修改为<code>nobreak</code>。</p><p>事实上如果不需要处理搜索到符合condition元素时的情况，只需要检查符合condition元素是否存在时，使用<code>any</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">existed = any(map(condition, words))</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> existed:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Not found'</span></span><br></pre></td></tr></table></figure><h1>try...except...else</h1><blockquote class="blockquote-center"><p>分开异常处理与正常情况</p></blockquote><p><code>try...except</code>语法大家都不陌生，大多数情况下简单地使用地<code>try...except...else</code>语法将臃肿的try block重构就可以让代码的结构更加清晰，将异常处理和正常情况清晰地区分开来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_external_json</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"maybe valid json, maybe some plain text of error"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_something_with</span><span class="params">(result)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_error</span><span class="params">(e)</span>:</span></span><br><span class="line">    <span class="comment"># maybe log exception trace</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Oops'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GOOD</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    result = json.loads(get_external_json())</span><br><span class="line">    do_something_with(result)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    handle_error(e)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BETTER</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 异常可能抛出点</span></span><br><span class="line">    result = json.loads(get_external_json())</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># 异常处理</span></span><br><span class="line">    handle_error(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 正常情况</span></span><br><span class="line">    do_something_with(result)</span><br></pre></td></tr></table></figure><p><code>try...except...else</code>这个结构清晰地区分了异常可能的抛出点，异常处理及正常情况三种情况。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以下介绍一些&lt;code&gt;python idiom&lt;/code&gt;，每当你在代码库中看到以下的模式可以参照以下的建议进行重构，让代码变得更加的&lt;code&gt;pythonic&lt;/code&gt;，可读性更好，更容易维护。&lt;/p&gt;
&lt;p&gt;代码示例Python版本为2.7&lt;/p&gt;
&lt;h1&gt;
      
    
    </summary>
    
    
      <category term="Python" scheme="http://mpwang.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Emacs: 编辑代码与工作效率</title>
    <link href="http://mpwang.github.io/2014/11/12/emcas-and-productivity/"/>
    <id>http://mpwang.github.io/2014/11/12/emcas-and-productivity/</id>
    <published>2014-11-11T16:00:00.000Z</published>
    <updated>2017-08-27T09:17:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1>硬件</h1><blockquote class="blockquote-center"><p>投资硬件是最简单直接的提高工作效率的方法</p></blockquote><p>屏幕与键鼠是程序员与电脑之间的输出输入设置，是程序员每天工作接触时间最长的东西，硬件上的提升可以直接提高工作效率以及每天工作的心情。</p><h2>键盘的选择</h2><blockquote><p><a href="http://xahlee.info/kbd/keyboard_switch_mechanisms.html" target="_blank" rel="noopener">认识薄膜键盘，机械键盘与静电电容键盘</a></p></blockquote><h3>不差钱直接上静电电容键盘</h3><h3>机械键盘</h3><blockquote><p><a href="http://www.zhihu.com/question/23105050" target="_blank" rel="noopener">先说结论：只选红轴。</a></p></blockquote><p>键盘这东西最好一步到位一发退烧，不需要反复投入。就机械键盘说来，</p><ul><li>红轴与黑轴无冲，适合游戏玩家，不同的是按到底所需的力度红轴较小黑轴较大</li><li>茶轴与青轴敲击有段落感适合程序员与打字員，青轴所需力度较小但是声音比较吵，茶轴是最多人选择的键芯。综上选择茶轴机械键盘使用，然后可以考虑转向红轴。最重要的是实际试用自己最符合自己的手感</li></ul><h3>人体工程学键盘</h3><p>人体工程学键盘的选择见仁见智</p><h3>HHKB(Happy Hacking Keyboard)</h3><p>HHKB吹有很多，盲目买HHKB的更多。不引战，只说个人观点：<strong>HHKB不适合重度Emacs用户</strong></p><h3>键盘布局的选择</h3><p>市面上一般键盘所用的都是qwert布局的键盘，虽然有数据表示<a href="https://www.cnblogs.com/zhangshenjia/archive/2012/04/11/qwerty_dvorak_colemak.html" target="_blank" rel="noopener">dvorak布局</a>可以提高输入效率以及减少手指疲劳，但是较高的上手难度以及训练过渡期间几乎让你不会打字的痛苦都是使用dvorak布局的成本，而且不见得在你掌握新布局之后打字效率会有多大的提升。</p><p>作为程序员打字的速度并不是瓶颈，思考速度才是瓶颈，老老实实使用qwert布局就足够了。</p><h2>多屏幕</h2><p><a href="http://www.techug.com/post/programmer-mult-monitors.html" target="_blank" rel="noopener">多个显示器可以提高程序员的工作效率</a>，减少切换屏幕带来的上下文切换。从一家公司是否给员工配置多个显示器可以看出公司是否尊重程序员的工作。</p><p>无脑地使用两个显示器即可提高工作效率，你可能还需要屏幕支架。</p><h2>使用轨迹球，避免鼠标手</h2><p>Logitech M570 聊胜于无</p><h1>选择正确的编程字体</h1><p>windows 下自带的的 Consolas 以及 Mac 下自带的 Monaco 是不错的选择</p><p>英文的等宽字体: <a href="https://be5invis.github.io/Iosevka/" target="_blank" rel="noopener">Iosevka</a>, <a href="https://sourcefoundry.org/hack/" target="_blank" rel="noopener">Hack</a>, <a href="https://adobe-fonts.github.io/source-code-pro/" target="_blank" rel="noopener">Source Code Pro</a></p><p>中文的等宽字体: 文泉驿等宽微米黑, 微软雅黑</p><p>好多人还在使用Windows系统默认的字体，那效果用来看代码实在是惨不忍睹。一旦选择了任一个编程字体，只要15分钟，你几乎不可能还会用回默认的Courier New字体。</p><h2>Emacs中文与英文对齐</h2><p><a href="https://github.com/tumashu/cnfonts" target="_blank" rel="noopener">chinese-fonts-setup</a> 分别设置Emacs显示中英文时使用不同的字体和大小，帮助你对齐中英文，在我看来在写org文档时这是一个必备的扩展。在使用org-mode table对齐时特别有用。</p><h1>编辑器: Emacs</h1><blockquote class="blockquote-center"><p>Why it's worth to learn emacs, because the experience will not go away</p></blockquote><p>Emacs的学习曲线是比较陡峭，但是长期来说投资在Emacs上的时间是值得的。逻辑非常简单：</p><ul><li>程序员的工作需要进行大量的文本编辑工作</li><li>Emacs是非常强大的文本编辑器</li><li>所以Emacs可以提高程序员的工作效率</li></ul><h2>key binding</h2><p>当你在命令行界面使用bash时，你熟悉的<code>ctrl+a</code>跳至行首, <code>ctrl+e</code>跳至行末等快捷键其实就是来源于Emacs，事实上你使用的是bash依赖的<a href="https://cnswww.cns.cwru.edu/php/chet/readline/rluserman.html" target="_blank" rel="noopener">GNU readline</a>的默认emacs mode。</p><p>Mac OS下的cocoa应用默认有emacs按键绑定，你用发现在Mac下使用emacs按键绑定是很自然的事情。</p><p>大多数流行的IDE(Eclipse/JetBrains系列/VS Code)都可以设置为 emacs 布局的按键绑定。</p><p>熟悉了 emacs 的基本操作快捷键组合后很多地方都可以用得上。</p><h2>Emacs的编辑哲学</h2><p>为什么学习Emacs可以带来好处，因为Emacs会让你对于编辑文本的思考方式不再是基于字符的方法，取而代之的是逻辑上的<code>编辑动作</code>。</p><p>从最基本的两个命令（<code>M-x</code>调用命令，<code>ctrl+h</code>查找帮助）开始，你对于日常编辑文本的需求都会变成命令式的。</p><h3>例子</h3><p>排序，选中需要编辑的行，<code>M-x sort-lines</code>.</p><p>消除行末多余的空格，选中需要编辑的行，<code>M-x whitespace-cleanup</code>.</p><p>光标的移动，字符的删除不再是右移一个字符，删除一个字符。使用<code>ctrl</code>键组合进行基于字符的移动和删除，使用<code>meta</code>键组合进行基于词语的移动和删除。</p><ul><li><code>ctrl-f</code>右移一个字符 <code>meta-f</code>右移一个词语</li><li><code>ctrl-d</code>删除一个字符 <code>meta-d</code>删除一个词语</li></ul><p>文件内的跳转不再是基于上下左右移动光标，使用<code>ace-jump-mode</code>或者<code>avy-mode</code>你可以快速将光标定位于你想要跳转到的单词。</p><p><img src="/images/avy-goto-char.png" alt="jumping around"></p><h3>showcases</h3><p>想到知道 emacs 在日常的编辑文本工作中可以有多用。<a href="http://emacsrocks.com/" target="_blank" rel="noopener">Emacs Rocks</a>的一系列简短视频可以告诉你。掌握其中一些技巧可以让你在几秒钟内完成你之前也许需要用分钟来计算的任务。</p><h3>秘密武器：emacs lisp</h3><p>原生的emacs也许是很好，但是还不够好。Emacs的秘密在于它的扩展可以使用emacs lisp编程语言来写，Emacs 本身相当于emacs lisp的运行环境和解析器。</p><p>emacs lisp是一门完善的编程语言，所以程序员们可以方便地编写扩展来集成调用第三方的应用，也许是一个web api也许是一个命令行工具，然后提供给emacs使用。emacs用户可以方便的使用<code>M-x</code>进行调用，相当于将复杂的编辑需求抽象成一个<code>编辑动作</code>。</p><h3>杀手级应用</h3><p>emacs的用户群体已经超出了程序员的范围，现在有许多作家以及科学写作者都开始使用emacs，这些都是emacs的 <a href="http://orgmode.org/" target="_blank" rel="noopener">org-mode</a> 带来。简单的说来org-mode是一个使用emacs来写笔记的扩展，使用一种类似于markdown的语法。</p><p>我自己使用org-mode来组织笔记，编写内容然后生成<a href="https://github.com/fniessen/org-html-themes" target="_blank" rel="noopener">类似readthedocs风格的文档</a>，编写内容然后<a href="https://github.com/yjwen/org-reveal" target="_blank" rel="noopener">生成</a>用于<a href="http://lab.hakim.se/reveal-js/#/" target="_blank" rel="noopener">演讲分享的slides</a>。</p><p>emacs的另一个杀手级应用我个人认为是<a href="https://magit.vc" target="_blank" rel="noopener">magit</a>，在emacs里进行 git 的管理。<img src="/images/magit.png" alt="magit"></p><h1>结语</h1><p>提高工作效率，投资硬件是最简单直接生效最快的方法。程序员的日常工作需要大量的文本编辑，emacs很有用，但即使不使用emacs投资时间去掌握一个自己喜欢的编辑器/IDE也是值得的，因为每日的工作大量时间花费在编辑器/IDE里面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;硬件&lt;/h1&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;投资硬件是最简单直接的提高工作效率的方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;屏幕与键鼠是程序员与电脑之间的输出输入设置，是程序员每天工作接触时间最长的东西，硬件上的提
      
    
    </summary>
    
    
      <category term="Emacs" scheme="http://mpwang.github.io/tags/Emacs/"/>
    
  </entry>
  
  <entry>
    <title>Scott H Young - 为什么要学&#39;没用&#39;的东西？</title>
    <link href="http://mpwang.github.io/2014/10/17/why-learn-useless-things/"/>
    <id>http://mpwang.github.io/2014/10/17/why-learn-useless-things/</id>
    <published>2014-10-16T16:00:00.000Z</published>
    <updated>2017-08-05T11:30:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.scotthyoung.com/blog/" target="_blank" rel="noopener">Scott Young</a>是一位我很喜欢的博主，他关注于如何&quot;Learn fast, archieve more&quot;，并且身体力行。他最为人津津乐道的事迹是他的<a href="http://www.scotthyoung.com/blog/mit-challenge/" target="_blank" rel="noopener">MIT Challenge</a>，他在12个月的时间用一种苦行僧的生活方式，近似专业运动员训练般的高强度学习完成了MIT4年计算机系的课程学习并且通过了测试。</p><p><a href="http://www.scotthyoung.com/blog/2014/10/03/learn-useless-things/" target="_blank" rel="noopener">Why learn &quot;Useless&quot; Things</a>这篇博文分享了他关于为什么要学习“没用”的东西的观点。</p><p>大意概括Scott的观点如下：</p><ul><li>多学习知识能够增加人的启发式思考</li><li>因为对新领域知识的缺乏在学习新知识时推断当前学习的知识是否“有用”可能不准确，现在看来没用的知识说不定在日后会派上用场</li><li>即使所学的东西真的没用也可以让自己对现实理解的模型更加准确(an accurate model of reality)</li></ul><p>在与朋友闲聊时谈起在业余时间里评估与接触的各种技术与工具时也曾被人问起：“学这个有什么用？（看这种书有什么用？）不如...&quot;，Scott的观点我是十分赞同的，很好的回答了这种问题，对这个问题也曾思索过但是末能够像Scott那样清楚地表达出来。</p><p>在程序员的圈子时也有着什么工具框架API用到的时候再说这种观点，这种观点当然是没错的。但是在遇到新的问题，新的应用场景时如果根本就不知道某种工具/技术/理论的存在，又怎么能够快速找到合适的解决方案呢？很多重复制造出来的轮子就是在这种情况下出现的，所以说博识强记是没错的，博识当然有益，强记不必强求。我自己在最近一个项目里快速地做出了让客户满意的方案，这相当程序得益于我平时阅读博客文章，关注技术动向，遇到有可能用到的工具技术时多加留意并记录下来的习惯。</p><p>Steve Job应该是个相当好的例子，他在大学的时候去旁听了看起来与计算机毫无关系的美术字课程并著迷于书法和字体，并对排版产生了浓厚的兴趣。但是这却让他在日后设计苹果个人电脑时设计出了漂亮的字体帮助苹果赢得了市场。有时现在看来没用的知识，说不定日后真的会派上用场。</p><p>Scott的最后一个观点有些哲学意味，我却是最赞成与喜欢这个观点。霍金在《大设计》一书中提出的最核心观点就是不存在不依赖模型的理论。多学习一点知识也就会获得多一点对于世界的了解，帮助自己形成一个对于认识世界更加准确的模型。从任何意义上说真是有益的。很多人都会有记录日记与写文章的习惯，这能够帮助人思考，但是并不了解这是为什么。几年前的夏天我翻书柜时发现了一本朋友大学时认知心理学的教材，闲来无事读了一遍。却是让我了解到大脑如何主动接受信息的模型，对知识进行深度加工会加深神经元之间的联接从而加深记忆的理论。在那之后我就养成了读书写读书笔记，学习时做思维导图，使用Pocket与Evernote记录信息的习惯。虽然对于认知科学只是有很浅薄的认识，也许我了解的知识不是最准确或者是绝对意义上正确的，但是在自己的实践过程中行之有效并且有益，这就足够了。</p><p>开卷有益，古人诚不我欺。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.scotthyoung.com/blog/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Scott Young&lt;/a&gt;是一位我很喜欢的博主，他关注于如何&amp;quot;Learn fast, archieve more
      
    
    </summary>
    
    
      <category term="杂谈" scheme="http://mpwang.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>编程的技艺, 禅与道</title>
    <link href="http://mpwang.github.io/2014/10/15/chitchat---way-to-programming/"/>
    <id>http://mpwang.github.io/2014/10/15/chitchat---way-to-programming/</id>
    <published>2014-10-14T16:00:00.000Z</published>
    <updated>2017-08-05T11:30:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><a href="http://www.douban.com/note/383111983/" target="_blank" rel="noopener">原文</a>备份</em></p><h1>风潮</h1><p>题目起得很大,实则谈的只是一点个人的随想. 首先要说文中并不过多涉及技术细节, 本人更不是什么大牛, 只是浅谈自己的一些不成熟并带有个人色彩的认识, 难免会有偏颇之处. 说得不对说得不好, 不要削我.</p><p>现在似乎有一股风潮(或者说近来有越吹越烈的趋势?), 与计算机, 软件开发或编程相关的事物有时会带上一些有宗教或艺术色彩的文字.来看看一些例子:</p><ul><li>流行的Javascript框架: Dojo(道场)</li><li>流行的PHP框架: Zend PHP(阿维斯陀经注解, 网上解释这是波斯琐罗亚斯德教的圣书, 不太知道应该怎么翻译)</li><li>来自外星人科技Lisp家族的杰作: 编程语言Qi(气)以及他的后继者Shen(神)</li><li>网站设计领域的著名网站: CSS Zen Garden(CSS禅意花园)</li><li>在寓言中暗喻程序员修仙之道的好书: The Tao of programming(编程之道)</li><li>硅谷创业之父Paul Graham文集, 畅销书: 黑客与画家</li><li>计算机领域中当之无愧的传世经典, 被有些好玩的程序员供起来上香奉养的神书: The Art of Computer Programming(计算机程序设计艺术)</li></ul><p>他们起这些名字难道是因为名字带上了宗教与艺术相关的词汇之后显得高大上(可以提升逼格)? 答案肯定是否定的. 以上的例子都是饱含智慧结晶的杰作, 不是随随便便被创作出来. 他们的作者似乎都认为编程是一门技艺, 到了相当的程度之后已经是一种境界一种艺术, 追求的事物用中国文化中代表无上境界的文字来说就是: 禅与道. 不闻乎古人有言: 技可进乎道, 艺可通乎神.</p><p>曾经看过MIT关于SICP的远古上课视频, 记忆深刻的是在第一课上那个教授在黑板上写下大大的两个单词: Computer Science, 然后回过头来对学生们说了一句话, 大意是We are going to learn computer science, but it's not about computer and not about science. 那么究竟是about what? 这么深奥的说法今天还是无法参透啊, 但是可以作为类比吧, 编程究竟又是关于什么的呢. 编程也不仅仅是像程序们自嘲的那样: 我们程序员只是IT民工, 工地搬砖的. 即使是搬砖的, 还是可以有点小追求的.</p><p>在围棋领域中说棋士追求下棋的境界, 人们不会觉得那是他们在扯谈, 而画画, 写作, 作诗, 编曲更是直接与艺术挂钩了. 即使在工程学领域, 作为外行人也曾听闻建筑学上有&quot;建筑是凝固的音乐&quot;这一说法. 它们都有一个共同点, 那就是它们都是一种创造性活动. 而编程作为一种创造性活动, 也是一门技艺. 想写出让人赞叹的程序需要有高超的技巧以及相当的审美观, 如何组织程序, 写出优美的代码, 处理问题逻辑, 考虑系统架构, 设计解决方案就好像画家画画, 作家写书, 同样需要有创造性与灵感以及问题领域的专业知识, 充满挑战与乐趣, 可以称作是工程与美学的结合. 而软件开发更是关于方法论与如何组织人的活动的学问, 研究的是比较玄乎的东西, 不是硬梆梆冷冰冰的计算机硬件. 不同于建筑学此等可以用百年为单位来计数有着悠久历史的学科, 编程或者说是软件开发作为一个行业的历史比较短, 毕竟计算机的大规模普及也只是近代的事情. 关于软件开发没有人知道什么方式是最好的, 所有人都在摸索中前进. 与木匠厨师等职业的经验类似, 前人总结的best practice都是在实践中累积下来的经验之谈, 关于怎么开发软件与编程没有最好的定式, 只有合适实用与否之分. 你没见过厨师做菜的时候切菜要精确到厘米, 下佐料要精确毫克的吧, 即使是有, 这样做出来的菜可以适应不同的食材, 满足不同人的口味吗?</p><p>既然编程是一门技艺, 那么就可以去追求它. 在提升思维质量以及累积领域特定的专业知识之外, 编程这个活动还带有强烈的个人色彩, 其中有得审美因素的影响. 在大量的实践与博识之后, 在编程中就会带上个人的品味. 而品味的形成又会促使技艺的提高, 毕竟口味变刁了, 就会对代码有种精神洁癖或者变成细节控, 逼使自己去让程序变得更符合自己的审美, 在打磨的过程中让程序的品质得到提高. 所以要提高自己的技艺就要努力地形成以及提高自己的品味, 而品味的形成离不开大量的实践与广泛的见识. 写程序与写书本质上非常类似, 不同的是用的是编程语言而不是自然语言. 说起编程语言为什么叫做语言呢, 那是因为在计算机的虚拟世界里, 程序员们在用一种机器可以理解的&quot;语言&quot;来和计算机交流, 告诉他外面的世界是怎么样的, 想要让机器如何运作, 自由地进行创造, 所以称作为&quot;语言&quot;. 但是随着计算机性能的提高以及编译器理论的发展, 在离开与硬件紧密相连的领域, 现在的程序员越来越重视代码的可读性, 编程有着社交属性, 代码还是写给人看的, 翻译成机器指令的工作就交给编译器.</p><p>程序员是工程师, 是problem solver, 问题解决者. 编程员使用工具, 创造工具, 开发软件, 解决问题. 在选择什么工具, 如何创造工具, 如何开发软件, 怎么解决问题的过程中不可避免因为各自审美观与方法论的不同, 各自的答案就会带上个人色彩, 程序员圈子存在着的许多争论就因此而生. 说起来程序员在某些问题上立场鲜明, 与现实中不同党派的支持者政见不同非常类似. 最出名的莫过于Vi与Emacs哪个是最好编辑器之争(顺利一提我是Emacs党, 这篇文章就是在Emacs下写的), 最常见的就各种编程语言支持者之间的争论, 还有类unix vs. Windows, 各种IDE, 解决同个问题的不同库之间的争论等等, 程序员的圈子多姿多彩, 很热闹的啊.</p><p>程序员都是高级的工具使用者与方法论者, 个人觉得实践出真知, 程序员应该抱着实用主义的心态, 不人云亦云地去盲目迷信某种方法论与崇拜某种工具. 在这里说一说个人的一些看法:</p><h1>大规模应用要用云服务器</h1><p>现在这个云服务器概念非常热门, 谷歌的GAE和亚马逊的AWS就不用说了, 国内的大互联网公司都在开展自己的云服务器服务(新浪云, 阿里云, 腾讯云, 百度云, 就连京东也来掺一脚). 但是不是现在大规模的应用和网站就得要用云服务器了? It depends. 提供一个<a href="http://highscalability.com/blog/2014/7/21/stackoverflow-update-560m-pageviews-a-month-25-servers-and-i.html" target="_blank" rel="noopener">例子</a>, StackExchange由100多个网站构成，其中包括了Alexa排名第54的StackOverflow(相信这个网站不会陌生)。StackExchang有400万用户，每月5.6亿PV，但只用25台服务器. 它的Windows服务器运行的操作系统版本是Windows 2012 R2，Linux服务器运行Centos 6.4.5.6亿PV, 25台服务器, 其中有11台运行的Web服务器是微软的IIS. 好像现在一提Web服务器就想起Apache和Nginx, 微软家的IIS不太受欢迎, 但是SO的例子还是说IIS很好用的.</p><h1>设计模式很牛逼</h1><p>听说面试经常会问到? 诚然了解各种设计模式的概念并在合适的地方使用它是有益的. 但是反对将它捧得太高, 在代码中为了用它而用它, 好像用了设计模式代码就闪闪发光, 品质立马提高. 了解设计模式之后, 反而会破除对它的迷信. 可能有人会提<a href="http://coolshell.cn/articles/3320.html" target="_blank" rel="noopener">JDK源码里面用了23种设计模式的例子</a>来支持使用设计模式, 但是个人觉得如果你同时了解Java和设计模式, 你就会发现设计模式的使用正是因为Java这种语言比较冗余缺乏表达力, 所以需求显式地使用设计模式来弥补它的不足. 谷歌的研究主管Peter Norvig在一篇1998年的<a href="http://norvig.com/design-patterns/" target="_blank" rel="noopener">文章</a>中就讨论了动态语言中设计模式, 你可以看到在表达能力比较强的动态语言(还可以推广到一些强类型的函数式语言)中有些设计模式已经被隐式地包含了, 不需要显式地去使用它. 但是理解各种设计模式的概念能够让你在代码中将它们识别出来, 并在必要的合适的地方使用它们来绕过语言的缺憾来达到目的. 就像Head First Design pattern一书说的, 不能去强行修改代码来迎合某种设计模式. 八封一下, 王垠大神在博客中也有说过每当他在代码中清除一个设计模式, 他的代码就变得更加简洁, 更加容易理解(此等境界, 目前仰望中).</p><h1>哪种编程语言最好</h1><p>各种争论之中, 编程语言之争好像是最激烈的, 到处都可以看到不同语言之间的支持者在掐架. 我是right tool for the right job的支持者, 我不会用C来写生成动态网页的程序, 也不会用Haskell来做系统管理的任务. 如果有一种编程语言是最好的, 那一种编程语言就足够了, 那为什么会有这么多编程语言, 而且新语言还在不停地诞生? 近来比较热门的新语言有Go, Rust, JVM平台上的Ceylon, 编译成C的Nimrod, Erlan平台(BVM)上的Elixir. 答案就是没有最好的编程语言, 只有合适的编程语言. 要完成特定的任务就选用特定的语言与相应的工具. 新语言的出现是因为编程语言的理论研究(像新的类型系统)在发展, 程序员的需求在同样也变化, 而越是热门的语言变化就越慢, 当有人感到现在的语言满足不了需要时, 新的编程语言就被创造出来. 多了解几门语言之后就会发现, 类似的编程概念与经验在各种语言之间是相通的, 不同是各种编程语言各自独有的特性与概念. 八卦一下垠神在博客中有说过他不羡慕各种编程语言的特性, 因为他了解背后编译器是怎么实现它们的, 如果他想要他就可以做出来. 他貌似写过很多编译器当乐趣消遣. 他最近加入了<a href="http://sourcegraph.com/" target="_blank" rel="noopener">sourcegraph</a>, 其中对Python/Ruby代码的分析就是以他的工作为基础的.</p><h1>敏捷开发</h1><p>推荐<a href="http://coolshell.cn/articles/3745.html" target="_blank" rel="noopener">一篇陈皓的文章</a>. 在我离开之前的公司时, 公司内部有着推广敏捷开发的氛围, 各种各样的讲座,分享会, 在团队内部推行daily stand-up meeting, 但是即使是使用了scrum, story, rapid iteration等概念, 实际工作中字官僚主义横行, 项目的流程还是老一套的样子, 只学其形不见其真意. 个人就不多说, 只想说方法论只是方法论, 能不能够真正去使用这种哲学做出好东西来才是重点. 原教旨主义绝对不可取.</p><p>作为一个普通的程序员, 想成为一个好的程序员还有太多东西需要学习啊.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://www.douban.com/note/383111983/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文&lt;/a&gt;备份&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;风潮&lt;/h1&gt;
&lt;p&gt;题目起得很大,实则谈的只是一点个人的随想.
      
    
    </summary>
    
    
      <category term="杂谈" scheme="http://mpwang.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Common Lisp - 想说爱你不容易</title>
    <link href="http://mpwang.github.io/2014/10/14/common-lisp-too-hard-to-love/"/>
    <id>http://mpwang.github.io/2014/10/14/common-lisp-too-hard-to-love/</id>
    <published>2014-10-13T16:00:00.000Z</published>
    <updated>2017-08-05T11:30:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><a href="http://www.douban.com/note/227176889/" target="_blank" rel="noopener">原文</a>备份</em></p><p>前阵子由阮一峰翻译出版的黑客与画家一书似乎激起了不少人对于Lisp的兴趣，出于个人兴趣开始学习Lisp有一段时间，在这里写写自己接触Lisp过程的感想。</p><p>Lisp目前有两种主要的dialect: Common Lisp和Scheme。</p><p>Scheme对于Scheme我了解不深只用过其中一种dialect: Racket一段时间。Racket有一个非常方便使用的IDE: DrRacket(它附带了很多教学包)以及非常详细的文档说明，学习期间阅读了&lt;<htdp>&gt;和&lt;<the little="" schemer="">&gt;，在了解Lisp的基本思想之后我发现Scheme很难使用(也许是我没有深入学习），来google了一些Scheme和Common Lisp的比较后，我转向了Common Lisp。</the></htdp></p><h1>Welcome to Common Lisp</h1><p>首先来看一下CL的实现列表，看一下还真不少啊，商业收费和免费开源都有，想当初为选择哪一个实现好纠结了一段时间。从好的方面说，有这么多的实现可以让人选择在不同环境下用不同的实现，但是这也带来了问题：社区的分化和库的通用性问题。如果不想代码只能在特定的CL实现上运行，写代码的就要考虑不同CL实现之间的通用性，真是让人头疼。</p><h1>IDE</h1><p>写CL用什么IDE呢？google一下你会告诉大家都用Emacs+SLIME(少部分人用Vim+SLIMV，但是我相信Lisp程序员最终还是用回到Emacs的怀抱的）。Eclipse也有CL的插件Cusp，但个人感觉并不好用。</p><p>来看看典型的Common Lisp工作环境：Emacs + SLIME。你需要掌握：</p><ol><li>Common Lisp语言</li><li>Common Lisp实现的特定细节 比如run time options，实现对于CL的扩展等</li><li>Emacs: 包括基本操作，配置初始文件(.emcas or .emacs.d/init.el)设置好SLIME</li><li>Paredit: Emcas的extension，用于方便地编辑括号与Lisp表达式</li><li>SLIME: 基本操作</li></ol><p>好吧，并不是说Emacs不好，事实上Emcas+SLIME对于熟练的程序员来说是一个非常强力的编程环境，但是对于没有接触过Emacs的程序员来说，在学习CL的过程中就要同时学习使用Emacs，当然长期来说是有好处，但是这么陡峭的学习曲线已经足于让大多数初学者望而止步。</p><p>在这里要提一下，CL是一种比较verbose的语言，有些函数名像multiple-value-bind destructuring-bind是相当的长，没有好的编辑器支持补全功能的话会容易写错。如果没有自动缩进功能的话，lisp code写起来是相当痛苦的。</p><h1>Modern Features</h1><p>Lisp是一门相当古老的语言，资深的Common Lisper会告诉你X语言的Y特性可以在Lisp中找到或者通过Z的方式用Lisp实现，但是不可否认的是Common Lisp语言本身缺少对一些现今重要的编程概念/工具的支持。</p><p>Common Lisp是在94年完成了标准化，标准给具体的实现留下了相当大的空间，Network programming、Thread、GUI都没有覆盖到。也有人说委员会决定了能够经得起时间考验的核心部分，这些个随时间变动的部分就留给具体的实现。当然这些都可以通过库来支持，但是问题也随之而来，不同的实现+不同的库的选择无疑给程序员带来了难题。(支持不同实现的网络编程库有USOCKET,支持不同实现的线程库有bordeaux-threads，当然它们也不是100% portable的)</p><p>由于历史原因，Common Lisp没有在不同的数据结构之间建立一个统一的抽象，因为一开始CL中所有的数据结构都是用List实现的(Use Lists For Everything - ULFE)。CL有两套分别用于List和Vector的函数，一套用于Sequence抽象(List/Vector/String)的函数，一套用于hash-table的函数。在提供不同数据结构统一的抽象这一点上Clojure做得非常好。</p><p>缺少字面值hash-table(可以通过reader macro在某种程度上实现)，用过Javascript和Clojure的应该都明白它的强大之处，最近Java7也加入了类似的功能。</p><h1>Library &amp; Hacker Culture</h1><p>许多关于CL的抱怨都是关于库的，CL库的数量比较少(相比于Java/C/C++这些主流语言)，而且大多数库都是poor-documented的，缺少详细的说明和例子。写高质量文档对于程序员来说不是件简单轻松的事，而且CL作为一种冷门语言市场上没有太多职位提供给CL程序员，所以也就没有那么人能够得到金钱支持或贡献个人时间来写免费开源的库。我一直听到有人说Lisp是多么多么强大，是的，Lisp非常强大，我知道，但是如果一种编程语言不能容易地与外部世界打交道的话，It doesn't make sense.</p><p>举个例子，用Common Lisp来做XML处理，上Cliki找一下发现有不少啊，我应该用哪一个呢？随便点开看看，发现大多数文档中API的说明不太清楚。而且不是资深的CLer的话也缺少相应的知识来回答下面的问题：哪个库更好？这个库可不可以信任？它有没有bugs? 性能怎么样？它是在活跃的开发中还是已经停止维护了(dead-project)？</p><p>为什么会样子，这个现象也与Lisp的Hacker文化有关。Lisp是给Hacker准备的语言，它的强大力量只会在越过了陡峭的学习曲线的某一点后显示出来。因为Common Lisp的表达能力是这么的强大几个人甚至一个smart guy单枪匹马就能够写出足够复杂的程序来，所以大规模的CL hacker合作项目比较少。结果就是每个Hacker都有自己的solution,开发者开发它用来解决的自己工作项目的特定问题，后来开源出来了并不代表它适用于其它用户。Common Lisp的强大反而阻碍了库的标准化，而且Common Lisp也没有类似CPAN for Perl这样的东西存在。</p><p>QuickLisp的出现是一个福音，能够解决库的依赖问题以及自己下载相应的库，目前有700个上下的库。</p><p>Reddit.com讲述了他们从Common Lisp迁移到Python上的原因，主要也是缺少库的问题。</p><h1>Advantages</h1><p>在克服了这么多困难之后，你还是选择了Common Lisp，有什么好处呢？</p><h2>Macro</h2><p>Common Lisp的强大的Macro会让你轻松的扩展CL本身来迎合自己的需求，最终形成一个用来解决你的特定问题的DSL。Lisp语言的Macro提供了语法层次上的抽象，让你可以将反复在程式上出现的模式抽象出来，这也是Lisp强大以及和其它语言区分开来的一个原因。</p><h2>多范式</h2><p>Common Lisp的多范式编程可以让你自由地表达自己思想，指令式编程？没有问题，面向对象？没有问题，函数式编程？没有问题，混合着一起使用都没有问题。</p><h2>REPL（Read-Evaluate-Print-Loop)</h2><p>Lisp为人津津乐道的功能就是它的快速原型开发， 为什么快，因为它全程提供了一个REPL环境，在编译型语言中你需要经历写代码-编译-运行-试错-修改-编译...的流程，而在Lisp语言中你可以实时地更新代码，基本是一边写代码一边在ＲＥＰＬ中测试然后马上修改然后马上得到新的程序然后继续试验，从编写代码到看到代码的输出的循环是如此的短以至于它极高的提高了程序员的生产率（当然这只是理想情况），read-time compile-time run-time基本上是没有区别的（对于macro来说read-time与compile-time有所区别，这里不详谈），这就是用Lisp能够快速开发出软件原型的原因。PG在这篇被CLer反复提到的文章(Beating the Averages)中提到他开发ViaWeb的故事，Common Lisp就是它的秘密武器。可能最后你的程序会迁移到其它语言/平台上，但是你可以快速地构建出软件的雏形。</p><h1>End</h1><p>Common Lisp真的是让人又爱又恨，不过就算不用CL学习它也用对你有所帮助。新技术层出不穷，而Common Lisp会继续稳定地保持下去，它会继续被用于人工智能领域，研究机构，用于解决复杂度非常高的问题，大公司开发的内部工具。然而对于一般的程序员来说，想用Common Lisp作为自己的首要编程语言真的不太容易。在过去50多年的历史Lisp都没能流行起来，未来也许也不会流行起来。如果问哪种Lisp dialect有可能流行起来的话，Clojure 应该就是其中的佼佼者，作为一门新兴的语言它正在吸引越来越多人的眼光，许多人选择它的程序员有着Rudy/Python/Java/Common Lip的背景，基于JVM平台得益于java ecosystem它天生就解决了库的问题。</p><p>PS：对于common lisp还有building system和deployment/delivery的问题没有谈，因为没有用CL做过实际项目这些并不了解，但是也知道其中也有被人诟病的地方。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://www.douban.com/note/227176889/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文&lt;/a&gt;备份&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;前阵子由阮一峰翻译出版的黑客与画家一书似乎激起了不少人对于Lisp
      
    
    </summary>
    
    
      <category term="Lisp" scheme="http://mpwang.github.io/tags/Lisp/"/>
    
      <category term="CommonLisp" scheme="http://mpwang.github.io/tags/CommonLisp/"/>
    
  </entry>
  
  <entry>
    <title>using emacs under mac</title>
    <link href="http://mpwang.github.io/2013/08/10/using-emacs-under-mac/"/>
    <id>http://mpwang.github.io/2013/08/10/using-emacs-under-mac/</id>
    <published>2013-08-09T16:00:00.000Z</published>
    <updated>2017-08-05T11:30:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>在mac下折腾了emacs有一段时间了，写点经验分享一下，顺便一提，mac下cocoa应用全局的emacs按键绑定太舒服了。</p><h1>安装Emacs</h1><p>mac默认安装了emacs的，不过版本比较旧(22.x)，而且只能在终端下使用，这里选用homebrew来安装Emacs, 首先安装<a href="http://brew.sh/" target="_blank" rel="noopener">homebrew</a>：</p><pre><code>ruby -e &quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)&quot;# --cocoa选项表示安装带图形化界面的emacsbrew install emacs --cocoa</code></pre><p>安装后brew会提示你可以运行一个命令将emacs 24.3版本链接到/Applications下，这样在应用程序中可以直接双击打开emacs。</p><h1>Mac下的设置</h1><p>使用emacs可能会遇到键位设置的问题，有些键盘上没有option键只有alt键，使用发现alt键不起作用，用来运用<code>M-x</code>的绑定变成了<code>Esc-x</code>。解决方法如下：</p><p>在自带的终端下使用: 偏好设置 -&gt; 设置 -&gt; 键盘 -&gt; 勾上使用option键作为meta键</p><p>在iterm2下使用:Preferences -&gt; Profiles -&gt; 选择配置文件 -&gt;　keys　-&gt;　在Left/Right option key acts 选项选择 +Esc</p><p>在图形化界面下设置需要在emacs初始文件(~/.emacs.d/init.el)中加上：</p><pre><code>（when (eq system-type 'darwin);; use option key as meta key(setq mac-option-modifier 'meta)）</code></pre><h1>以daemon的方式使用emacs</h1><p>双击Emacs.app每次都会重新打开一个新的进程来跑emacs, 我更喜欢emacs server + emacs client的方式。用<code>emacs --daemon</code>的方式找开一个后台跑的emacs服务进程，再来emacsclient来连接。</p><p>在~/.bash_profile(使用zsh的话就是~/.zshrc)中加入以下alias</p><pre><code># 启动emacs后台进程alias emdaemon=&quot;emacs --daemon&quot;# 结束emacs后台进程alias emkill=&quot;emacsclient -e '(kill-emacs)'&quot;# 新建emacs窗口来编辑文件alias ec=&quot;emacsclient -c $@&quot;</code></pre><p>在init.el中加上</p><pre><code>(setq window-system-default-frame-alist  '(    ;; if frame created on Macintosh Cocoa display    (ns     (menu-bar-lines . 1)     (tool-bar-lines . nil)     ;; mouse     (mouse-wheel-mode . 1)     (mouse-wheel-follow-mouse . t)     (mouse-avoidance-mode . 'exile)     ;; face     (font . &quot;Monaco 12&quot;)     ;; frame size     (width . 96)     (height . 60)     )    ;; if on term    (nil     (menu-bar-lines . 0)     (tool-bar-lines . 0)     ;; (background-color . &quot;black&quot;)     ;; (foreground-color . &quot;white&quot;)     )    )  )</code></pre><p><a href="http://emacser.com/daemon.htm" title="使用Emacs daemon" target="_blank" rel="noopener">Emacs中文网这篇文章</a>有更详细的介绍关于emacsclient新建frame设置的介绍。</p><h1>参考文章</h1><ul><li><a href="http://kelly-mclaughlin.com/2012/07/27/emacs-daemon.html" target="_blank" rel="noopener">Setting up the Emacs daemon on OS X</a></li><li><a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html" target="_blank" rel="noopener">Using Emacs as a Server</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在mac下折腾了emacs有一段时间了，写点经验分享一下，顺便一提，mac下cocoa应用全局的emacs按键绑定太舒服了。&lt;/p&gt;
&lt;h1&gt;安装Emacs&lt;/h1&gt;
&lt;p&gt;mac默认安装了emacs的，不过版本比较旧(22.x)，而且只能在终端下使用，这里选用homebr
      
    
    </summary>
    
    
      <category term="Emacs" scheme="http://mpwang.github.io/tags/Emacs/"/>
    
      <category term="Mac" scheme="http://mpwang.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>windows下搭建jekyll环境</title>
    <link href="http://mpwang.github.io/2013/08/08/windowsjekyll/"/>
    <id>http://mpwang.github.io/2013/08/08/windowsjekyll/</id>
    <published>2013-08-07T16:00:00.000Z</published>
    <updated>2017-08-05T11:30:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1>安装Ruby</h1><p>Jekyll是基于Ruby的静态网页生成工具，使用rubyinstaller在windows下安装Ruby. <a href="http://rubyinstaller.org/downloads/" target="_blank" rel="noopener">下载链接</a>.在RubyInstallersArchives下选择合适的版本，64位系统选择(x64)结尾的安装文件。</p><p>安装rubyinstaller到D:\Ruby200. 确保安装时在安装界面中选中添加ruby到环境变量的选项。</p><h2>安装Ruby DevKit</h2><p><a href="http://rubyinstaller.org/downloads/" target="_blank" rel="noopener">下载链接</a>.在Development Kit下选择合适版本。下回来的文件是个7z的自解压包，解压到D:\Rubydevkit. 运行</p><pre><code>ruby dk.rb initruby hk.rb install</code></pre><h1>安装jekyll</h1><p>理论到直接运行</p><pre><code>gem install jekyll</code></pre><p>就可以安装jekyll了，但是国内的网络环境（你懂的）可能访问不到rubygems，因为rubygem的服务使用了Amazon的云服务器。但是可以使用淘宝的国内镜像：<a href="http://ruby.taobao.org/" target="_blank" rel="noopener">http://ruby.taobao.org/</a>.</p><pre><code>$ gem sources --remove https://rubygems.org/$ gem sources -a http://ruby.taobao.org/$ gem sources -l*** CURRENT SOURCES ***http://ruby.taobao.org# 请确保只有 ruby.taobao.org</code></pre><p>先用<code>gem sources -l</code>看看，有些情况下是默认使用http://rubygems.org 而不是https://rubygems.org</p><pre><code>gem install jekyll</code></pre><p>下载jekyll</p><p>至此jekyll就成功安装并且可以使用了。</p><h1>安装Python</h1><p>Jekyll使用Pygments在高亮代码，而Pygments是基于Python的。首先安装Python, windows上选用<a href="http://portablepython.com/wiki/PortablePython3.2.1.1/" target="_blank" rel="noopener">Portable Python</a>。安装到D:\Portable_Python</p><p>然后将Portable Python下的App\Scripts和App目录添加到环境变量PATH中。</p><h2>安装easy install</h2><p>easy install是Python库的管理软件，类似于gem对于Ruby。我们安装easy install来安装Pygments. <a href="https://pypi.python.org/pypi/setuptools/0.9.8#windows" target="_blank" rel="noopener">https://pypi.python.org/pypi/setuptools/0.9.8#windows</a>,在python官网这一节介绍中可以找到怎么在windows下安装easy installer的说明，保存<a href="https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py" target="_blank" rel="noopener">ez_setup.py</a>到本地，比如说D:\</p><pre><code>python ez_setup.py</code></pre><h2>安装Pygments#</h2><pre><code>easy_install Pygments</code></pre><h1>安装git</h1><p>用jekyll写博客少不了用git啦，下载安装<a href="http://msysgit.github.io/" target="_blank" rel="noopener">msysgit</a>.把安装界面上的选项全部勾上，选项全部默认就好。</p><h1>第一个模板</h1><p>现在jekyll环境已经成功搭建了，下个jekyll bootstrap模板体验一下。在开始菜单中找开git bash.</p><pre><code>cd /Dgit clone https://github.com/jekyllbootstrap/theme-the-program.gitcd theme-the-programjekyll serve</code></pre><p>访问http://localhost:4040</p><h1>深入了解jekyll</h1><p>了解jekyll的配置和各个文件的作用，这篇文章是个很好的入门：<a href="jiyeqian.github.io/2012/07/host-your-pages-at-github-using-jekyll/">基于jekyll的github建站指南</a></p><h1>参考文章</h1><ul><li><a href="http://blog.chengyunfeng.com/?p=437" target="_blank" rel="noopener">在Windows系统配置Jekyll</a></li><li><a href="jiyeqian.github.io/2012/07/host-your-pages-at-github-using-jekyll/">基于jekyll的github建站指南</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;安装Ruby&lt;/h1&gt;
&lt;p&gt;Jekyll是基于Ruby的静态网页生成工具，使用rubyinstaller在windows下安装Ruby. &lt;a href=&quot;http://rubyinstaller.org/downloads/&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
    
      <category term="Jekyll" scheme="http://mpwang.github.io/tags/Jekyll/"/>
    
      <category term="Ruby" scheme="http://mpwang.github.io/tags/Ruby/"/>
    
      <category term="Git" scheme="http://mpwang.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Setup Clojure with SLIME under Emacs</title>
    <link href="http://mpwang.github.io/2012/08/24/setup-clojure-with-slime-under-emacs/"/>
    <id>http://mpwang.github.io/2012/08/24/setup-clojure-with-slime-under-emacs/</id>
    <published>2012-08-23T16:00:00.000Z</published>
    <updated>2017-08-05T11:30:25.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p>Updated:</p><blockquote><p>Swank Clojure is deprecated in favour of nrepl.el</p></blockquote><p><a href="https://github.com/kingtim/nrepl.el" target="_blank" rel="noopener">nrepl.el on Github</a></p><hr><h2>Clojure Side</h2><ul><li>Clojure</li><li><a href="https://github.com/technomancy/leiningen" target="_blank" rel="noopener">Leiningen</a></li></ul><h2>Emcas Side</h2><ul><li>Emcas (normally with SLIME installed)</li><li>clojure-mode</li></ul><p>Basically what you need is leiningen on Clojure side and clojure-mode on Emacs side.</p><h2>Setup lein</h2><p>Install lein according to the instructions on its index.For lein 2.0 add such line into your global user profile <strong>.lein/profiles.clj</strong>.</p><pre><code>{:user {:plugins [[lein-swank &quot;1.4.4&quot;]]}}</code></pre><p>If you still use lein 1.x, you need such steps.</p><ul><li>run <code>lein plugin install lein-swank 1.4.4</code></li><li>add <code>:dev-dependencies [[lein-swank &quot;1.4.4&quot;]]</code> to your project.clj</li></ul><h2>Setup clojure-mode</h2><p>Download <a href="https://github.com/technomancy/clojure-mode" target="_blank" rel="noopener">clojure-mode.el</a>, place it under your emacs load path, add such line to your .emacs file.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">require</span> 'clojure-mode)</span><br></pre></td></tr></table></figure><p>You may install <strong>paredit</strong> and <strong>rainbow-delimiters</strong> to enhance experience for writting Clojure code with Emacs.</p><h2>Start up SLIME with Clojure</h2><p>Now</p><pre><code>M-x clojure-jack-in</code></pre><p><strong>Warn: conflit with inferior-lisp-program</strong></p><p>Sometimes you work under Emacs with Common Lisp before, you may see Emacs pop up with a window of error message when run the command above. That's might be caused by the previous compiled swank version for common lisp.</p><p><strong>Comment out</strong> your setup for Common Lisp in your .emacs like below and try again:</p><pre><code>(setq inferior-lisp-program &quot;sbcl --noinform&quot;)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;Updated:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Swank Clojure is deprecated in favour of nrepl.el&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/king
      
    
    </summary>
    
    
      <category term="Lisp" scheme="http://mpwang.github.io/tags/Lisp/"/>
    
      <category term="Clojure" scheme="http://mpwang.github.io/tags/Clojure/"/>
    
      <category term="Emacs" scheme="http://mpwang.github.io/tags/Emacs/"/>
    
  </entry>
  
</feed>
